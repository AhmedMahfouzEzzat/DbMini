Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/25/17 06:56:33
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 00001400				BUFSIZE = 5120;//5kb
 = 00000004				id_element_size = 4
 = 00000014				name_element_size = 20
 = 00000003				grade_element_size = 3
 = 00000032				max_student_count = 50

 00000000 72 65 70 6F 72		report_file byte "report.txt",0
	   74 2E 74 78 74
	   00
 0000000B 00000000			report_filehandle dword ?
 0000000F 00000000			filehandle dword ?
 00000013  00001400 [			buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00001414  00001400 [			report_buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00002815  00000032 [			idArr byte max_student_count dup(id_element_size dup('+')), 0
	    00000004 [
	     2B
	    ]
	   ] 00
 000028DE  00000032 [			nameArr byte max_student_count dup(name_element_size dup('+')), 0
	    00000014 [
	     2B
	    ]
	   ] 00
 00002CC7  00000032 [			gradeArr byte max_student_count dup(grade_element_size dup('+')), 0
	    00000003 [
	     2B
	    ]
	   ] 00
 00002D5E  00000032 [			alphaGradeArr byte max_student_count dup('+'), 0
	    2B
	   ] 00
 00002D91  00000004 [			id_temp byte id_element_size dup('+')
	    2B
	   ]
 00002D95 00000000			grade_index dword 0
 00002D99 2B 2B 2B 00			empty_grade byte "+++",0
 00002D9D 00000000			fileSize dword 0
 00002DA1 00000000			filesize_temp dword 0
 00002DA5 00000000			student_count dword 0
 00002DA9 00000000			id_index_temp dword 0
 00002DAD  00000014 [			temp1 byte 20 dup(' ')
	    20
	   ]
 00000000			.code

 00000000			Open_Createfile proc,f_Name:ptr byte
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000003  6A 00	   *	    push   +000000000h
 00000005  68 00000080	   *	    push   +000000080h
 0000000A  6A 04	   *	    push   +000000004h
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  6A 00	   *	    push   +000000000h
 00000010  68 C0000000	   *	    push   +0C0000000h
 00000015  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000018  E8 00000000 E   *	    call   CreateFileA
					ret
 0000001D  C9		   *	    leave  
 0000001E  C2 0004	   *	    ret    00004h
 00000021			Open_Createfile endp

 00000021			CLEAR_Createfile proc, f_Name:ptr byte
 00000021  55		   *	    push   ebp
 00000022  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000024  6A 00	   *	    push   +000000000h
 00000026  68 00000080	   *	    push   +000000080h
 0000002B  6A 02	   *	    push   +000000002h
 0000002D  6A 00	   *	    push   +000000000h
 0000002F  6A 00	   *	    push   +000000000h
 00000031  68 C0000000	   *	    push   +0C0000000h
 00000036  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000039  E8 00000000 E   *	    call   CreateFileA
					ret
 0000003E  C9		   *	    leave  
 0000003F  C2 0004	   *	    ret    00004h
 00000042			CLEAR_Createfile endp

 00000042			encrypt_or_decrypt_buffer proc, key:byte
 00000042  55		   *	    push   ebp
 00000043  8B EC	   *	    mov    ebp, esp
 00000045  BE 00000013 R		mov esi ,offset buffer
 0000004A  8B FE			mov edi ,esi
 0000004C				L:
 0000004C  AC					lodsb
 0000004D  32 45 08				xor al,key
 00000050  AA					stosb
 00000051  E2 F9			loop L
					ret
 00000053  C9		   *	    leave  
 00000054  C2 0004	   *	    ret    00004h
 00000057			encrypt_or_decrypt_buffer endp  

 00000057			initialize proc USES eax ecx edi , dist:ptr byte , value:byte , dist_size: dword
 00000057  55		   *	    push   ebp
 00000058  8B EC	   *	    mov    ebp, esp
 0000005A  50		   *	    push   eax
 0000005B  51		   *	    push   ecx
 0000005C  57		   *	    push   edi
 0000005D  FC				cld
 0000005E  8A 45 0C			mov al, value
 00000061  8B 4D 10			mov ecx, dist_size
 00000064  8B 7D 08			mov edi, dist
 00000067  F3/ AA			rep stosb
					ret
 00000069  5F		   *	    pop    edi
 0000006A  59		   *	    pop    ecx
 0000006B  58		   *	    pop    eax
 0000006C  C9		   *	    leave  
 0000006D  C2 000C	   *	    ret    0000Ch
 00000070			initialize endp   

 00000070			SplitBuffer proc
					;//file example : "10,Ahmed,100,A," 13 10 "20,Zaki,,," 13 10 
 00002DC1				.data
 00002DC1 00000000			startF dword ? ;// start of field which is needed to be copied
 00002DC5 00000000			endF dword ? ;// end of field which is needed to be copied
 00002DC9 00000000			idS dword ?
 00002DCD 00000000			namS dword ?
 00002DD1 00000000			gradeS dword ?
 00002DD5 00000000			alphaGradeS dword ?
 00000070				.code
 00000070  60				pushad
 00000071  BF 00000013 R		mov edi, offset buffer
 00000076  C7 05 00002DC9 R		mov idS, offset idArr
	   00002815 R
 00000080  C7 05 00002DCD R		mov namS, offset nameArr
	   000028DE R
 0000008A  C7 05 00002DD1 R		mov gradeS, offset gradeArr
	   00002CC7 R
 00000094  C7 05 00002DD5 R		mov alphaGradeS, offset alphaGradeArr
	   00002D5E R
 0000009E  B0 2C			mov al, ','
 000000A0  8B 0D 00002D9D R		mov ecx, fileSize
 000000A6  89 0D 00002DA1 R		mov filesize_temp,ecx
 000000AC				outer :  ;//loop until the file end 
 000000AC  B9 00000004				mov ecx, 4
 000000B1					inner:  ;//loop on fields
 000000B1  51						push ecx
 000000B2  8B 0D 00002DA1 R				mov ecx, fileSize_temp
 000000B8  89 3D 00002DC1 R				mov startF, edi
 000000BE  FC						cld
 000000BF  F2/ AE					repne scasb;// move edi to the offset that have (,)
 000000C1  89 3D 00002DC5 R				mov endF, edi
 000000C7  FF 0D 00002DC5 R				dec endf
 000000CD  59						pop ecx
 000000CE  8B 1D 00002DC5 R				mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 000000D4  2B 1D 00002DC1 R				sub ebx, startF
 000000DA  29 1D 00002DA1 R				sub filesize_temp,ebx
 000000E0  FF 0D 00002DA1 R				dec filesize_temp  ;//for delamter ','
 000000E6  57						push edi
							;// fill arrays with data between startF and endF
 000000E7  83 F9 03					cmp ecx, 3
 000000EA  74 24					je N
 000000EC  83 F9 02					cmp ecx, 2
 000000EF  74 34					je G
 000000F1  83 F9 01					cmp ecx, 1
 000000F4  74 49					je A
 000000F6						i:
 000000F6  8B 3D 00002DC9 R				mov edi, idS
 000000FC  83 C7 03					add edi, id_element_size-1
 000000FF  83 05 00002DC9 R				add idS, id_element_size
	   04
 00000106  8B 35 00002DC5 R				mov esi, endf
 0000010C  4E						dec esi    ;//last byte in id
 0000010D  FD						std
 0000010E  EB 42					jmp next
 00000110						N :
 00000110  8B 3D 00002DCD R				mov edi, namS
 00000116  83 05 00002DCD R				add namS, name_element_size
	   14
 0000011D  8B 35 00002DC1 R				mov esi, startf
 00000123  EB 2D					jmp next
 00000125						G :
 00000125  8B 3D 00002DD1 R				mov edi, gradeS
 0000012B  83 C7 02					add edi, grade_element_size-1
 0000012E  83 05 00002DD1 R				add gradeS, grade_element_size
	   03
 00000135  8B 35 00002DC5 R				mov esi, endf
 0000013B  4E						dec esi
 0000013C  FD						std
 0000013D  EB 13					jmp next
 0000013F						A :
 0000013F  8B 3D 00002DD5 R				mov edi, alphaGradeS
 00000145  83 05 00002DD5 R				add alphaGradeS, 1
	   01
 0000014C  8B 35 00002DC1 R				mov esi, startF
 00000152						next :
 00000152  83 FB 00					cmp ebx,0
 00000155  74 06					je done
 00000157  51						push ecx
 00000158  8B CB					mov ecx, ebx
 0000015A  F3/ A4					rep movsb
 0000015C  59						pop ecx	
 0000015D						done:
 0000015D  5F						pop edi
							
 0000015E  49					dec ecx			;//
 0000015F  83 F9 00				cmp ecx,0		;//instade of short loop
 00000162  0F 85 FFFFFF49			jne inner		;//
 00000168  83 C7 02				add edi, 2
 0000016B  83 2D 00002DA1 R			sub filesize_temp,2 ;//for new line
	   02
 00000172  FF 05 00002DA5 R			inc student_count
 00000178  83 3D 00002DA1 R		cmp filesize_temp,0		
	   00
 0000017F  0F 87 FFFFFF27		ja outer
 00000185  61				popad
 00000186  C3				ret
 00000187			SplitBuffer endp

 00000187			OpenDatabase proc, f_Name:ptr byte, key:byte
					;//open the file
 00000187  55		   *	    push   ebp
 00000188  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 0000018A  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000018D  E8 FFFFFE6E	   *	    call   Open_Createfile
 00000192  A3 0000000F R		mov filehandle, eax
					;//load the file in buffer
					INVOKE ReadFile,
					filehandle,offset buffer,BUFSIZE,offset fileSize,NULL
 00000197  6A 00	   *	    push   +000000000h
 00000199  68 00002D9D R   *	    push   dword  ptr OFFSET FLAT: fileSize
 0000019E  68 00001400	   *	    push   +000001400h
 000001A3  68 00000013 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000001A8  FF 35 0000000F R *	    push   filehandle
 000001AE  E8 00000000 E   *	    call   ReadFile
					;//decrypt data 
 000001B3  8B 0D 00002D9D R		mov ecx, fileSize
 000001B9  83 F9 00			cmp ecx,0
 000001BC  74 05			je done
					;INVOKE encrypt_or_decrypt_buffer,key
					;// fill the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr"
 000001BE  E8 FFFFFEAD			call SplitBuffer  
 000001C3				done:
					;//close the file
					INVOKE CloseHandle,filehandle
 000001C3  FF 35 0000000F R *	    push   filehandle
 000001C9  E8 00000000 E   *	    call   CloseHandle
					ret
 000001CE  C9		   *	    leave  
 000001CF  C2 0008	   *	    ret    00008h
 000001D2			OpenDatabase endp  
source.asm(169) : warning A6004:procedure argument or local not referenced : key

 000001D2			fillBuffer proc
 00002DD9				.data
 00002DD9 00000000			idPtr dword ?
 00002DDD 00000000			namePtr dword ?
 00002DE1 00000000			gradePtr dword ?
 00002DE5 00000000			alphaGradePtr dword ?
 000001D2				.code
 000001D2  BF 00000013 R		mov edi,offset buffer
 000001D7  C7 05 00002DD9 R		mov idPtr, offset idArr
	   00002815 R
 000001E1  C7 05 00002DDD R		mov namePtr, offset nameArr
	   000028DE R
 000001EB  C7 05 00002DE1 R		mov gradePtr, offset gradeArr
	   00002CC7 R
 000001F5  C7 05 00002DE5 R		mov alphaGradePtr, offset alphaGradeArr 
	   00002D5E R
					;//clear the buffer
					invoke initialize , edi , 0 , fileSize
 000001FF  FF 35 00002D9D R *	    push   fileSize
 00000205  6A 00	   *	    push   +000000000h
 00000207  57		   *	    push   edi
 00000208  E8 FFFFFE4A	   *	    call   initialize
 0000020D  8B 0D 00002DA5 R		mov ecx , student_count
 00000213				OUTER :
 00000213  51				push ecx
						;//copy id
 00000214  8B 35 00002DD9 R			mov esi, idPtr
 0000021A  B9 00000004				mov ecx, id_element_size
 0000021F					L1 :
 0000021F  80 3E 2B				cmp byte ptr[esi], '+'
 00000222  74 05				je N1      ;//next byte
 00000224  8A 06					mov al,[esi]
 00000226  88 07					mov [edi],al
 00000228  47						inc edi
 00000229					N1 :	
 00000229  46						inc esi 
 0000022A  E2 F3				loop L1
 0000022C  83 05 00002DD9 R			add idPtr, id_element_size
	   04
						;//write (,)
 00000233  C6 07 2C				mov byte ptr[edi], ','
 00000236  47					inc edi
						;//copy name
 00000237  8B 35 00002DDD R			mov esi, namePtr
 0000023D  B9 00000014				mov ecx, name_element_size
 00000242					L2 :
 00000242  80 3E 2B				cmp byte ptr[esi], '+'
 00000245  74 03				je N2    ;// break the loop
 00000247  A4						movsb
 00000248  E2 F8				loop L2
 0000024A					N2 :
 0000024A  83 05 00002DDD R			add namePtr, name_element_size
	   14
						;//write (,)
 00000251  C6 07 2C				mov byte ptr[edi], ','
 00000254  47					inc edi
						;//copy Grade
 00000255  8B 35 00002DE1 R			mov esi, gradePtr
 0000025B  B9 00000003				mov ecx, grade_element_size
 00000260					L3 :
 00000260  80 3E 2B				cmp byte ptr[esi], '+'
 00000263  74 05				je N3      ;//next byte
 00000265  8A 06					mov al,[esi]
 00000267  88 07					mov [edi],al
 00000269  47						inc edi
 0000026A					N3 :	
 0000026A  46						inc esi 
 0000026B  E2 F3				loop L3
 0000026D  83 05 00002DE1 R			add gradePtr, grade_element_size
	   03
						;//write (,)
 00000274  C6 07 2C				mov byte ptr[edi], ','
 00000277  47					inc edi
						;//copy alphaGrade
 00000278  8B 35 00002DE5 R			mov esi, alphaGradePtr
 0000027E  80 3E 2B				cmp byte ptr[esi], '+'
 00000281  74 01				je N4
 00000283  A4						movsb
 00000284					N4:
 00000284  FF 05 00002DE5 R			inc alphaGradePtr
						;//write (,)
 0000028A  C6 07 2C				mov byte ptr[edi], ','
 0000028D  47					inc edi
						;//add new line
 0000028E  C6 07 0D				mov byte ptr[edi], 13
 00000291  47					inc edi
 00000292  C6 07 0A				mov byte ptr[edi], 10
 00000295  47					inc edi
 00000296  59				pop ecx
 00000297  49				dec ecx			;//
 00000298  83 F9 00			cmp ecx,0		;//instade of short loop
 0000029B  0F 85 FFFFFF72		jne OUTER		;//
 000002A1  C3				ret
 000002A2			fillBuffer endp

 000002A2			SaveDatabase proc, f_Name:ptr byte, key:byte
					;//open the file
 000002A2  55		   *	    push   ebp
 000002A3  8B EC	   *	    mov    ebp, esp
					INVOKE Clear_Createfile,f_Name
 000002A5  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002A8  E8 FFFFFD74	   *	    call   CLEAR_Createfile
 000002AD  A3 0000000F R		mov filehandle,eax
 000002B2  8B 0D 00002D9D R		mov ecx, fileSize
 000002B8  83 F9 00			cmp ecx,0
 000002BB  74 22			je done
					;// load the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr" in buffer
 000002BD  E8 FFFFFF10			call fillBuffer
					;//encrypt data 
					;INVOKE encrypt_or_decrypt_buffer, key
					;//write data in the file
					INVOKE WriteFile,
					filehandle,offset buffer,fileSize,offset fileSize,null
 000002C2  6A 00	   *	    push   +000000000h
 000002C4  68 00002D9D R   *	    push   dword  ptr OFFSET FLAT: fileSize
 000002C9  FF 35 00002D9D R *	    push   fileSize
 000002CF  68 00000013 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000002D4  FF 35 0000000F R *	    push   filehandle
 000002DA  E8 00000000 E   *	    call   WriteFile
 000002DF				done:
					;//close the file
					INVOKE CloseHandle,filehandle
 000002DF  FF 35 0000000F R *	    push   filehandle
 000002E5  E8 00000000 E   *	    call   CloseHandle
					ret
 000002EA  C9		   *	    leave  
 000002EB  C2 0008	   *	    ret    00008h
 000002EE			SaveDatabase endp  
source.asm(273) : warning A6004:procedure argument or local not referenced : key

 000002EE			EnrollStudent proc,s_id:ptr byte,s_name:ptr byte, id_size: dword, name_size: dword		
					;//store id
 000002EE  55		   *	    push   ebp
 000002EF  8B EC	   *	    mov    ebp, esp
 000002F1  FD				std
 000002F2  BF 00002815 R		mov edi , offset idArr
 000002F7  BA 00000000			mov edx , 0
 000002FC  A1 00002DA5 R		mov eax , student_count
 00000301  BB 00000004			mov ebx , id_element_size
 00000306  F7 E3			mul ebx
 00000308  03 F8			add edi , eax
 0000030A  83 C7 03			add edi , id_element_size-1
 0000030D  8B 75 08			mov esi , s_id
 00000310  03 75 10			add esi , id_size 
 00000313  4E				dec esi
 00000314  8B 4D 10			mov ecx , id_size
 00000317  F3/ A4			rep movsb
					;//store name
 00000319  FC				cld
 0000031A  BF 000028DE R		mov edi , offset nameArr
 0000031F  BA 00000000			mov edx , 0
 00000324  A1 00002DA5 R		mov eax , student_count
 00000329  BB 00000014			mov ebx , name_element_size
 0000032E  F7 E3			mul ebx
 00000330  03 F8			add edi , eax
 00000332  8B 75 0C			mov esi , s_name
 00000335  8B 4D 14			mov ecx , name_size
 00000338  F3/ A4			rep movsb
					;//increment file size
 0000033A  8B 45 10			mov eax, id_size
 0000033D  03 45 14			add eax, name_size
 00000340  83 C0 06			add eax, 6 ;//for 4delemter ','and new line 
 00000343  01 05 00002D9D R		add fileSize, eax
 00000349  FF 05 00002DA5 R		inc student_count
					ret
 0000034F  C9		   *	    leave  
 00000350  C2 0010	   *	    ret    00010h
 00000353			EnrollStudent endp

 00000353			getIdIndex proc USES edi esi ecx ebx , s_id:ptr byte, s_id_size : dword

 00000353  55		   *	    push   ebp
 00000354  8B EC	   *	    mov    ebp, esp
 00000356  57		   *	    push   edi
 00000357  56		   *	    push   esi
 00000358  51		   *	    push   ecx
 00000359  53		   *	    push   ebx
					invoke initialize ,offset id_temp ,'+',id_element_size
 0000035A  6A 04	   *	    push   +000000004h
 0000035C  6A 2B	   *	    push   +00000002Bh
 0000035E  68 00002D91 R   *	    push   dword  ptr OFFSET FLAT: id_temp
 00000363  E8 FFFFFCEF	   *	    call   initialize
 00000368  FD				std
 00000369  BF 00002D91 R		mov edi , offset id_temp
 0000036E  83 C7 03			add edi , id_element_size-1
 00000371  8B 75 08			mov esi , s_id
 00000374  03 75 0C			add esi , s_id_size 
 00000377  4E				dec esi
 00000378  8B 4D 0C			mov ecx , s_id_size
 0000037B  F3/ A4			rep movsb

 0000037D  BB 00002815 R		mov ebx, offset idArr
 00000382  B8 00000000			mov eax, 0
 00000387  FC				cld 
 00000388				check :
 00000388  3B 05 00002DA5 R		cmp eax , student_count
 0000038E  74 16				je fail 
 00000390  BE 00002D91 R			mov esi, offset id_temp 
 00000395  8B FB				mov edi, ebx
 00000397  B9 00000004				mov ecx, id_element_size
 0000039C  F3/ A6				repe cmpsb
 0000039E  74 0B				je found  ;//break
 000003A0  83 C3 04				add ebx,id_element_size ;//next element
 000003A3  40					inc eax 
 000003A4  EB E2				jmp check
 000003A6				fail :
 000003A6  B8 FFFFFFFF				mov eax, -1
 000003AB				found :
					ret
 000003AB  5B		   *	    pop    ebx
 000003AC  59		   *	    pop    ecx
 000003AD  5E		   *	    pop    esi
 000003AE  5F		   *	    pop    edi
 000003AF  C9		   *	    leave  
 000003B0  C2 0008	   *	    ret    00008h
 000003B3			getIdIndex endp

 000003B3			AlphaGrade proc USES esi edi ecx , grade: ptr byte
 000003B3  55		   *	    push   ebp
 000003B4  8B EC	   *	    mov    ebp, esp
 000003B6  56		   *	    push   esi
 000003B7  57		   *	    push   edi
 000003B8  51		   *	    push   ecx
 00002DE9				.data
 00002DE9 2B 36 30 00			gradeF byte "+60", 0
 00002DED 2B 37 30 00			gradeD byte "+70", 0
 00002DF1 2B 38 30 00			gradeC byte "+80", 0
 00002DF5 2B 39 30 00			gradeB byte "+90", 0
 000003B9				.code
 000003B9  FC				cld 
 000003BA  8B 75 08			mov esi,  grade
 000003BD  BF 00002DE9 R		mov edi, offset gradeF
 000003C2  B9 00000003			mov ecx, 3
 000003C7  F3/ A6			repe cmpsb
 000003C9  72 43			jb FG

 000003CB  8B 75 08			mov esi,  grade
 000003CE  BF 00002DED R		mov edi, offset gradeD
 000003D3  B9 00000003			mov ecx, 3
 000003D8  F3/ A6			repe cmpsb
 000003DA  72 2E			jb DG

 000003DC  8B 75 08			mov esi,  grade
 000003DF  BF 00002DF1 R		mov edi, offset gradeC
 000003E4  B9 00000003			mov ecx, 3
 000003E9  F3/ A6			repe cmpsb
 000003EB  72 19			jb CG

 000003ED  8B 75 08			mov esi,  grade
 000003F0  BF 00002DF5 R		mov edi, offset gradeB
 000003F5  B9 00000003			mov ecx, 3
 000003FA  F3/ A6			repe cmpsb
 000003FC  72 04			jb BG

 000003FE				AG :
 000003FE  B0 41			mov al, 'A'
 00000400  EB 0E			jmp done
 00000402				BG :
 00000402  B0 42			mov al, 'B'
 00000404  EB 0A			jmp done
 00000406				CG :
 00000406  B0 43			mov al, 'C'
 00000408  EB 06			jmp done
 0000040A				DG :
 0000040A  B0 44			mov al, 'D'
 0000040C  EB 02			jmp done
 0000040E				FG :
 0000040E  B0 46			mov al, 'F'
 00000410				done :
					ret
 00000410  59		   *	    pop    ecx
 00000411  5F		   *	    pop    edi
 00000412  5E		   *	    pop    esi
 00000413  C9		   *	    leave  
 00000414  C2 0004	   *	    ret    00004h
 00000417			AlphaGrade endp

 00000417			DeleteStudent proc,s_id:ptr byte, s_id_size:dword
 00000417  55		   *	    push   ebp
 00000418  8B EC	   *	    mov    ebp, esp
 0000041A  60				pushad
					invoke getIdIndex,s_id, s_id_size
 0000041B  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 0000041E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000421  E8 FFFFFF2D	   *	    call   getIdIndex
 00000426  FC				cld
					;// moving ids back
 00000427  A3 00002DA9 R		mov id_index_temp , eax
 0000042C  BB 00000004			mov ebx , id_element_size
 00000431  F7 E3			mul ebx
 00000433  BF 00002815 R		mov edi,offset idArr
 00000438  03 F8			add edi,eax
 0000043A  57				push edi
 0000043B  50				push eax
 0000043C  B9 00000004			mov ecx, id_element_size
 00000441  B0 2B			mov al,'+'
 00000443  F3/ AE			repe scasb
 00000445  29 0D 00002D9D R		sub fileSize,ecx
 0000044B  83 2D 00002D9D R		sub fileSize,2
	   02
 00000452  58				pop eax
 00000453  5F				pop edi
 00000454  B9 000000C9			mov ecx,sizeof idArr
 00000459  2B C8			sub ecx,eax
 0000045B  83 E9 05			sub ecx,5
 0000045E  8B F7			mov esi,edi
 00000460  83 C6 04			add esi,4
 00000463  F3/ A4			rep movsb
					;// moving name back
 00000465  A1 00002DA9 R		mov eax,id_index_temp
 0000046A  BB 00000014			mov ebx,20
 0000046F  F7 E3			mul ebx
 00000471  BF 000028DE R		mov edi,offset nameArr
 00000476  03 F8			add edi,eax
 00000478  57				push edi
 00000479  50				push eax
 0000047A  B9 00000014			mov ecx, name_element_size
 0000047F  B0 2B			mov al,'+'
 00000481  F2/ AE			repne scasb
 00000483  83 2D 00002D9D R		sub fileSize,name_element_size
	   14
 0000048A  01 0D 00002D9D R		add fileSize,ecx
 00000490  58				pop eax
 00000491  5F				pop edi
 00000492  B9 000003E9			mov ecx,sizeof nameArr
 00000497  2B C8			sub ecx,eax
 00000499  83 E9 15			sub ecx,21
 0000049C  8B F7			mov esi,edi
 0000049E  83 C6 14			add esi,20
 000004A1  F3/ A4			rep movsb
					;// moving grades back
 000004A3  A1 00002DA9 R		mov eax,id_index_temp
 000004A8  BB 00000003			mov ebx,3
 000004AD  F7 E3			mul ebx
 000004AF  BF 00002CC7 R		mov edi,offset gradeArr
 000004B4  03 F8			add edi,eax
 000004B6  57				push edi
 000004B7  50				push eax
 000004B8  B9 00000003			mov ecx, grade_element_size
 000004BD  B0 2B			mov al,'+'
 000004BF  F3/ AE			repe scasb
 000004C1  74 0C			je G_empety
 000004C3  29 0D 00002D9D R		sub fileSize,ecx
 000004C9  FF 0D 00002D9D R		dec fileSize
 000004CF				G_empety:
 000004CF  FF 0D 00002D9D R		dec fileSize
 000004D5  58				pop eax
 000004D6  5F				pop edi
 000004D7  B9 00000097			mov ecx,sizeof gradeArr
 000004DC  2B C8			sub ecx,eax
 000004DE  83 E9 04			sub ecx,4
 000004E1  8B F7			mov esi,edi
 000004E3  83 C6 03			add esi,3
 000004E6  F3/ A4			rep movsb
					;// moving alphaGrade
 000004E8  BF 00002D5E R		mov edi,offset AlphagradeArr
 000004ED  03 3D 00002DA9 R		add edi,id_index_temp
 000004F3  80 3F 2B			cmp byte ptr[edi],'+'
 000004F6  74 06			je A_empety
 000004F8  FF 0D 00002D9D R		dec fileSize
 000004FE				A_empety:
 000004FE  FF 0D 00002D9D R		dec fileSize
 00000504  B9 00000033			mov ecx,sizeof alphagradeArr
 00000509  2B 0D 00002DA9 R		sub ecx,id_index_temp
 0000050F  83 E9 02			sub ecx,2
 00000512  8B F7			mov esi,edi
 00000514  83 C6 01			add esi,1
 00000517  F3/ A4			rep movsb
 00000519  83 2D 00002D9D R		sub fileSize,2
	   02
 00000520  FF 0D 00002DA5 R		dec student_count
 00000526  61				popad
					ret 
 00000527  C9		   *	    leave  
 00000528  C2 0008	   *	    ret    00008h
 0000052B			DeleteStudent endp 

 0000052B			UpdateGrade proc, s_id:ptr byte, s_grade:ptr byte, s_id_size:dword, s_grade_size:dword
 0000052B  55		   *	    push   ebp
 0000052C  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 0000052E  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 00000531  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000534  E8 FFFFFE1A	   *	    call   getIdIndex
 00000539  A3 00002DA9 R		mov id_index_temp,eax
 0000053E  BB 00000003			mov ebx,grade_element_size
 00000543  F7 E3			mul ebx
 00000545  BF 00002CC7 R		mov edi,offset gradeArr
 0000054A  03 F8			add edi,eax
 0000054C  89 3D 00002D95 R		mov grade_index,edi
 00000552  57				push edi
 00000553  BE 00002D99 R			mov esi , offset empty_grade
 00000558  B9 00000003				mov ecx , grade_element_size
 0000055D  F3/ A6				repe cmpsb
 0000055F  75 0F				jne full ;//there is a value in it 
 00000561  8B 5D 14					mov ebx,s_grade_size 
 00000564  01 1D 00002D9D R				add fileSize ,ebx  ;//increment with grade size
 0000056A  FF 05 00002D9D R				inc fileSize       ;//increment with alpha grade size
 00000570					full :
 00000570  5F				pop edi
 00000571  83 C7 02			add edi,grade_element_size-1
 00000574  8B 75 0C			mov esi,s_grade
 00000577  03 75 14			add esi,s_grade_size
 0000057A  4E				dec esi
 0000057B  8B 4D 14			mov ecx,s_grade_size 
 0000057E  FD				std 
 0000057F  F3/ A4			rep movsb
 00000581  BF 00002D5E R		mov edi,offset alphaGradeArr
 00000586  03 3D 00002DA9 R		add edi,id_index_temp
					INVOKE AlphaGrade,grade_index
 0000058C  FF 35 00002D95 R *	    push   grade_index
 00000592  E8 FFFFFE1C	   *	    call   AlphaGrade
 00000597  88 07			mov [edi],al
					ret
 00000599  C9		   *	    leave  
 0000059A  C2 0010	   *	    ret    00010h
 0000059D			UpdateGrade endp  

 0000059D			DisStudentData proc,s_id:ptr byte,s_id_size:dword,s_name:ptr byte,s_grade:ptr byte,s_A_grade:ptr byte
 0000059D  55		   *	    push   ebp
 0000059E  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 000005A0  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 000005A3  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000005A6  E8 FFFFFDA8	   *	    call   getIdIndex
 000005AB  A3 00002DA9 R		mov id_index_temp,eax
 000005B0  BA 00000000			mov edx,0
 000005B5  BE 000028DE R		mov esi ,offset nameArr
 000005BA  BB 00000014			mov ebx , name_element_size
 000005BF  F7 E3			mul ebx
 000005C1  03 F0			add esi,eax
 000005C3  8B 7D 10			mov edi,s_name
 000005C6  B9 00000014			mov ecx, name_element_size
 000005CB				n:
 000005CB  8A 06				mov al ,[esi]
 000005CD  3C 2B				cmp al,'+'
 000005CF  74 06				je name_finished
 000005D1  88 07				mov [edi],al
 000005D3  47					inc edi
 000005D4  46					inc esi
 000005D5  E2 F4			loop n
 000005D7				name_finished:

 000005D7  A1 00002DA9 R		mov eax , id_index_temp
 000005DC  BE 00002CC7 R		mov esi , offset gradeArr
 000005E1  BB 00000003			mov ebx , grade_element_size
 000005E6  F7 E3			mul ebx
 000005E8  03 F0			add esi,eax
 000005EA  8B 7D 14			mov edi,s_grade
 000005ED  B9 00000003			mov ecx, grade_element_size
 000005F2				g:
 000005F2  8A 06				mov al ,[esi]
 000005F4  3C 2B				cmp al,'+'
 000005F6  74 03				je next  ;//next byte 
 000005F8  88 07				mov [edi],al
 000005FA  47					inc edi
 000005FB					next :
 000005FB  C6 07 20				mov byte ptr[edi],' '
 000005FE  46					inc esi
 000005FF  E2 F1			loop g

 00000601  BE 00002D5E R		mov esi , offset AlphagradeArr
 00000606  03 35 00002DA9 R		add esi , id_index_temp
 0000060C  8B 7D 18			mov edi , s_A_grade
 0000060F  8A 06			mov al ,[esi]
 00000611  3C 2B			cmp al,'+'
 00000613  74 03			je done
 00000615  88 07				mov [edi],al
 00000617  47					inc edi
 00000618				done:
 00000618  C6 07 20				mov byte ptr[edi],' '
					ret
 0000061B  C9		   *	    leave  
 0000061C  C2 0014	   *	    ret    00014h
 0000061F			DisStudentData endp

 0000061F			Swap proc ,sizes:dword,ptr1:ptr byte 
 0000061F  55		   *	    push   ebp
 00000620  8B EC	   *	    mov    ebp, esp
 00000622  8B 75 0C		mov esi,ptr1
 00000625  BF 00002DAD R	mov edi,offset temp1
 0000062A  8B 4D 08		mov ecx,sizes
 0000062D  F3/ A4		rep movsb 
 0000062F  8B 75 0C		mov esi,ptr1
 00000632  03 75 08		add esi,sizes
 00000635  8B 7D 0C		mov edi,ptr1
 00000638  8B 4D 08		mov ecx,sizes
 0000063B  F3/ A4		rep movsb 
 0000063D  8B 7D 0C		mov edi,ptr1
 00000640  03 7D 08		add edi,sizes
 00000643  BE 00002DAD R	mov esi,offset temp1
 00000648  8B 4D 08		mov ecx,sizes
 0000064B  F3/ A4		rep movsb
				ret
 0000064D  C9		   *	    leave  
 0000064E  C2 0008	   *	    ret    00008h
 00000651			Swap endp

 00000651			BubbleSort PROC USES eax ecx esi ebx edx edi,
				Count:DWORD ;//array size
 00000651  55		   *	    push   ebp
 00000652  8B EC	   *	    mov    ebp, esp
 00000654  50		   *	    push   eax
 00000655  51		   *	    push   ecx
 00000656  56		   *	    push   esi
 00000657  53		   *	    push   ebx
 00000658  52		   *	    push   edx
 00000659  57		   *	    push   edi
 0000065A  8B 4D 08		mov ecx,Count
 0000065D  49			dec ecx;//decrement count by 1
 0000065E  51			L1: push ecx ;//save outer loop count
 0000065F  BE 00002815 R	mov esi,offset idArr ;//point to first value
 00000664  BF 000028DE R	mov edi,offset nameArr
 00000669  BB 00002CC7 R	mov ebx,offset gradeArr
 0000066E  BA 00002D5E R	mov edx,offset alphaGradeArr
 00000673  8B 06		L2: mov eax,[esi] ;//get array value
 00000675  39 46 04		cmp [esi+4],eax ;//compare a pair of values
 00000678  7F 2D		jg L3 ;//if [ESI] <= [ESI+4], no exchange
 0000067A  87 46 04		xchg eax,[esi+4] ;//exchange the pair
 0000067D  89 06		mov [esi],eax
 0000067F  60			pushad
				invoke swap,4,esi
 00000680  56		   *	    push   esi
 00000681  6A 04	   *	    push   +000000004h
 00000683  E8 FFFFFF97	   *	    call   Swap
 00000688  61			popad
 00000689  60			pushad
				invoke swap,20,edi
 0000068A  57		   *	    push   edi
 0000068B  6A 14	   *	    push   +000000014h
 0000068D  E8 FFFFFF8D	   *	    call   Swap
 00000692  61			popad
 00000693  60			pushad
				invoke swap,3,ebx
 00000694  53		   *	    push   ebx
 00000695  6A 03	   *	    push   +000000003h
 00000697  E8 FFFFFF83	   *	    call   Swap
 0000069C  61			popad
 0000069D  60			pushad
				invoke swap,1,edx
 0000069E  52		   *	    push   edx
 0000069F  6A 01	   *	    push   +000000001h
 000006A1  E8 FFFFFF79	   *	    call   Swap
 000006A6  61			popad

 000006A7  83 C6 04		L3: add esi,4 ;//move both pointers forward
 000006AA  83 C7 14		add edi,20 ;//move both pointers forward
 000006AD  83 C3 03		add ebx,3 ;//move both pointers forward
 000006B0  83 C2 01		add edx,1 ;//move both pointers forward

 000006B3  E2 BE		loop L2 ;//inner loop
 000006B5  59			pop ecx ;//retrieve outer loop count
 000006B6  E2 A6		loop L1 ;//else repeat outer loop
 000006B8			L4: ret
 000006B8  5F		   *	    pop    edi
 000006B9  5A		   *	    pop    edx
 000006BA  5B		   *	    pop    ebx
 000006BB  5E		   *	    pop    esi
 000006BC  59		   *	    pop    ecx
 000006BD  58		   *	    pop    eax
 000006BE  C9		   *	    leave  
 000006BF  C2 0004	   *	    ret    00004h
 000006C2			BubbleSort ENDP

 000006C2			GenerateReport proc,f_name:ptr byte,sortby:byte
					
 000006C2  55		   *	    push   ebp
 000006C3  8B EC	   *	    mov    ebp, esp
					ret
 000006C5  C9		   *	    leave  
 000006C6  C2 0008	   *	    ret    00008h
 000006C9			GenerateReport endp
source.asm(624) : warning A6004:procedure argument or local not referenced : f_name
source.asm(624) : warning A6004:procedure argument or local not referenced : sortby


 000006C9			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 000006C9  55		   *	    push   ebp
 000006CA  8B EC	   *	    mov    ebp, esp
 000006CC  B8 00000001			mov eax, 1;//Return true to caller. 
					ret 
 000006D1  C9		   *	    leave  
 000006D2  C2 000C	   *	    ret    0000Ch
 000006D5			DllMain ENDP
source.asm(630) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(630) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(630) : warning A6004:procedure argument or local not referenced : lpReserved


				END DllMain

Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/25/17 06:56:33
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002DF9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006D5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AlphaGrade . . . . . . . . . . .	P Near	 000003B3 _TEXT	Length= 00000064 Public STDCALL
  grade  . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 000003FE _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 00000402 _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 00000406 _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 0000040A _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 0000040E _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000410 _TEXT	
BubbleSort . . . . . . . . . . .	P Near	 00000651 _TEXT	Length= 00000071 Public STDCALL
  Count  . . . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 0000065E _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000673 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000006A7 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 000006B8 _TEXT	
CLEAR_Createfile . . . . . . . .	P Near	 00000021 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeleteStudent  . . . . . . . . .	P Near	 00000417 _TEXT	Length= 00000114 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  G_empety . . . . . . . . . . .	L Near	 000004CF _TEXT	
  A_empety . . . . . . . . . . .	L Near	 000004FE _TEXT	
DisStudentData . . . . . . . . .	P Near	 0000059D _TEXT	Length= 00000082 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  s_name . . . . . . . . . . . .	DWord	 bp + 00000010
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000014
  s_A_grade  . . . . . . . . . .	DWord	 bp + 00000018
  n  . . . . . . . . . . . . . .	L Near	 000005CB _TEXT	
  name_finished  . . . . . . . .	L Near	 000005D7 _TEXT	
  g  . . . . . . . . . . . . . .	L Near	 000005F2 _TEXT	
  next . . . . . . . . . . . . .	L Near	 000005FB _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000618 _TEXT	
DllMain  . . . . . . . . . . . .	P Near	 000006C9 _TEXT	Length= 0000000C Public STDCALL
  hInstance  . . . . . . . . . .	DWord	 bp + 00000008
  fdwReason  . . . . . . . . . .	DWord	 bp + 0000000C
  lpReserved . . . . . . . . . .	DWord	 bp + 00000010
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnrollStudent  . . . . . . . . .	P Near	 000002EE _TEXT	Length= 00000065 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  id_size  . . . . . . . . . . .	DWord	 bp + 00000010
  name_size  . . . . . . . . . .	DWord	 bp + 00000014
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateReport . . . . . . . . .	P Near	 000006C2 _TEXT	Length= 00000007 Public STDCALL
  f_name . . . . . . . . . . . .	DWord	 bp + 00000008
  sortby . . . . . . . . . . . .	Byte	 bp + 0000000C
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenDatabase . . . . . . . . . .	P Near	 00000187 _TEXT	Length= 0000004B Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 000001C3 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Open_Createfile  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveDatabase . . . . . . . . . .	P Near	 000002A2 _TEXT	Length= 0000004C Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 000002DF _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SplitBuffer  . . . . . . . . . .	P Near	 00000070 _TEXT	Length= 00000117 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000000AC _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  i  . . . . . . . . . . . . . .	L Near	 000000F6 _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 00000110 _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 00000125 _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 0000013F _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000152 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000015D _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Swap . . . . . . . . . . . . . .	P Near	 0000061F _TEXT	Length= 00000032 Public STDCALL
  sizes  . . . . . . . . . . . .	DWord	 bp + 00000008
  ptr1 . . . . . . . . . . . . .	DWord	 bp + 0000000C
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGrade  . . . . . . . . . .	P Near	 0000052B _TEXT	Length= 00000072 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_grade  . . . . . . . . . . .	DWord	 bp + 0000000C
  s_id_size  . . . . . . . . . .	DWord	 bp + 00000010
  s_grade_size . . . . . . . . .	DWord	 bp + 00000014
  full . . . . . . . . . . . . .	L Near	 00000570 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
encrypt_or_decrypt_buffer  . . .	P Near	 00000042 _TEXT	Length= 00000015 Public STDCALL
  key  . . . . . . . . . . . . .	Byte	 bp + 00000008
  L  . . . . . . . . . . . . . .	L Near	 0000004C _TEXT	
fillBuffer . . . . . . . . . . .	P Near	 000001D2 _TEXT	Length= 000000D0 Public STDCALL
  OUTER  . . . . . . . . . . . .	L Near	 00000213 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000021F _TEXT	
  N1 . . . . . . . . . . . . . .	L Near	 00000229 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000242 _TEXT	
  N2 . . . . . . . . . . . . . .	L Near	 0000024A _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000260 _TEXT	
  N3 . . . . . . . . . . . . . .	L Near	 0000026A _TEXT	
  N4 . . . . . . . . . . . . . .	L Near	 00000284 _TEXT	
getIdIndex . . . . . . . . . . .	P Near	 00000353 _TEXT	Length= 00000060 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  check  . . . . . . . . . . . .	L Near	 00000388 _TEXT	
  fail . . . . . . . . . . . . .	L Near	 000003A6 _TEXT	
  found  . . . . . . . . . . . .	L Near	 000003AB _TEXT	
initialize . . . . . . . . . . .	P Near	 00000057 _TEXT	Length= 00000019 Public STDCALL
  dist . . . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	Byte	 bp + 0000000C
  dist_size  . . . . . . . . . .	DWord	 bp + 00000010
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFSIZE  . . . . . . . . . . . .	Number	 00001400h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
alphaGradeArr  . . . . . . . . .	Byte	 00002D5E _DATA	
alphaGradePtr  . . . . . . . . .	DWord	 00002DE5 _DATA	
alphaGradeS  . . . . . . . . . .	DWord	 00002DD5 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000013 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
empty_grade  . . . . . . . . . .	Byte	 00002D99 _DATA	
endF . . . . . . . . . . . . . .	DWord	 00002DC5 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00002D9D _DATA	
filehandle . . . . . . . . . . .	DWord	 0000000F _DATA	
filesize_temp  . . . . . . . . .	DWord	 00002DA1 _DATA	
gradeArr . . . . . . . . . . . .	Byte	 00002CC7 _DATA	
gradeB . . . . . . . . . . . . .	Byte	 00002DF5 _DATA	
gradeC . . . . . . . . . . . . .	Byte	 00002DF1 _DATA	
gradeD . . . . . . . . . . . . .	Byte	 00002DED _DATA	
gradeF . . . . . . . . . . . . .	Byte	 00002DE9 _DATA	
gradePtr . . . . . . . . . . . .	DWord	 00002DE1 _DATA	
gradeS . . . . . . . . . . . . .	DWord	 00002DD1 _DATA	
grade_element_size . . . . . . .	Number	 00000003h   
grade_index  . . . . . . . . . .	DWord	 00002D95 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idArr  . . . . . . . . . . . . .	Byte	 00002815 _DATA	
idPtr  . . . . . . . . . . . . .	DWord	 00002DD9 _DATA	
idS  . . . . . . . . . . . . . .	DWord	 00002DC9 _DATA	
id_element_size  . . . . . . . .	Number	 00000004h   
id_index_temp  . . . . . . . . .	DWord	 00002DA9 _DATA	
id_temp  . . . . . . . . . . . .	Byte	 00002D91 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max_student_count  . . . . . . .	Number	 00000032h   
namS . . . . . . . . . . . . . .	DWord	 00002DCD _DATA	
nameArr  . . . . . . . . . . . .	Byte	 000028DE _DATA	
namePtr  . . . . . . . . . . . .	DWord	 00002DDD _DATA	
name_element_size  . . . . . . .	Number	 00000014h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
report_buffer  . . . . . . . . .	Byte	 00001414 _DATA	
report_filehandle  . . . . . . .	DWord	 0000000B _DATA	
report_file  . . . . . . . . . .	Byte	 00000000 _DATA	
startF . . . . . . . . . . . . .	DWord	 00002DC1 _DATA	
student_count  . . . . . . . . .	DWord	 00002DA5 _DATA	
temp1  . . . . . . . . . . . . .	Byte	 00002DAD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   7 Warnings
	   0 Errors
