Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/25/17 09:42:35
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 00001400				BUFSIZE = 5120;//5kb
 = 00000004				id_element_size = 4
 = 00000014				name_element_size = 20
 = 00000003				grade_element_size = 3
 = 00000032				max_student_count = 50

 00000000 00000000			report_filehandle dword ?
 00000004 00000000			filehandle dword ?
 00000008  00001400 [			buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00001409  00001400 [			report_buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 0000280A  00000032 [			idArr byte max_student_count dup(id_element_size dup('+')), 0
	    00000004 [
	     2B
	    ]
	   ] 00
 000028D3  00000032 [			nameArr byte max_student_count dup(name_element_size dup('+')), 0
	    00000014 [
	     2B
	    ]
	   ] 00
 00002CBC  00000032 [			gradeArr byte max_student_count dup(grade_element_size dup('+')), 0
	    00000003 [
	     2B
	    ]
	   ] 00
 00002D53  00000032 [			alphaGradeArr byte max_student_count dup('+'), 0
	    2B
	   ] 00
 00002D86  00000004 [			id_temp byte id_element_size dup('+')
	    2B
	   ]
 00002D8A 00000000			grade_index dword 0
 00002D8E 2B 2B 2B 00			empty_grade byte "+++",0
 00002D92 00000000			fileSize dword 0
 00002D96 00000000			filesize_temp dword 0
 00002D9A 00000000			student_count dword 0
 00002D9E 00000000			id_index_temp dword 0
 00002DA2  00000014 [			temp1 byte 20 dup(' ')
	    20
	   ]
 00002DB6 00000000			idPtr dword ?
 00002DBA 00000000			namePtr dword ?
 00002DBE 00000000			gradePtr dword ?
 00002DC2 00000000			alphaGradePtr dword ?
 00000000			.code

 00000000			Open_Createfile proc,f_Name:ptr byte
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000003  6A 00	   *	    push   +000000000h
 00000005  68 00000080	   *	    push   +000000080h
 0000000A  6A 04	   *	    push   +000000004h
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  6A 00	   *	    push   +000000000h
 00000010  68 C0000000	   *	    push   +0C0000000h
 00000015  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000018  E8 00000000 E   *	    call   CreateFileA
					ret
 0000001D  C9		   *	    leave  
 0000001E  C2 0004	   *	    ret    00004h
 00000021			Open_Createfile endp

 00000021			CLEAR_Createfile proc, f_Name:ptr byte
 00000021  55		   *	    push   ebp
 00000022  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000024  6A 00	   *	    push   +000000000h
 00000026  68 00000080	   *	    push   +000000080h
 0000002B  6A 02	   *	    push   +000000002h
 0000002D  6A 00	   *	    push   +000000000h
 0000002F  6A 00	   *	    push   +000000000h
 00000031  68 C0000000	   *	    push   +0C0000000h
 00000036  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000039  E8 00000000 E   *	    call   CreateFileA
					ret
 0000003E  C9		   *	    leave  
 0000003F  C2 0004	   *	    ret    00004h
 00000042			CLEAR_Createfile endp

 00000042			encrypt_or_decrypt_buffer proc, key:byte
 00000042  55		   *	    push   ebp
 00000043  8B EC	   *	    mov    ebp, esp
 00000045  BE 00000008 R		mov esi ,offset buffer
 0000004A  8B FE			mov edi ,esi
 0000004C				L:
 0000004C  AC					lodsb
 0000004D  32 45 08				xor al,key
 00000050  AA					stosb
 00000051  E2 F9			loop L
					ret
 00000053  C9		   *	    leave  
 00000054  C2 0004	   *	    ret    00004h
 00000057			encrypt_or_decrypt_buffer endp  

 00000057			initialize proc USES eax ecx edi , dist:ptr byte , value:byte , dist_size: dword
 00000057  55		   *	    push   ebp
 00000058  8B EC	   *	    mov    ebp, esp
 0000005A  50		   *	    push   eax
 0000005B  51		   *	    push   ecx
 0000005C  57		   *	    push   edi
 0000005D  FC				cld
 0000005E  8A 45 0C			mov al, value
 00000061  8B 4D 10			mov ecx, dist_size
 00000064  8B 7D 08			mov edi, dist
 00000067  F3/ AA			rep stosb
					ret
 00000069  5F		   *	    pop    edi
 0000006A  59		   *	    pop    ecx
 0000006B  58		   *	    pop    eax
 0000006C  C9		   *	    leave  
 0000006D  C2 000C	   *	    ret    0000Ch
 00000070			initialize endp   

 00000070			SplitBuffer proc
					;//file example : "10,Ahmed,100,A," 13 10 "20,Zaki,,," 13 10 
 00002DC6				.data
 00002DC6 00000000			startF dword ? ;// start of field which is needed to be copied
 00002DCA 00000000			endF dword ? ;// end of field which is needed to be copied
 00000070				.code
 00000070  60				pushad
 00000071  BF 00000008 R		mov edi, offset buffer
 00000076  C7 05 00002DB6 R		mov idPtr, offset idArr
	   0000280A R
 00000080  C7 05 00002DBA R		mov namePtr, offset nameArr
	   000028D3 R
 0000008A  C7 05 00002DBE R		mov gradePtr, offset gradeArr
	   00002CBC R
 00000094  C7 05 00002DC2 R		mov alphaGradePtr, offset alphaGradeArr
	   00002D53 R
 0000009E  B0 2C			mov al, ','
 000000A0  8B 0D 00002D92 R		mov ecx, fileSize
 000000A6  89 0D 00002D96 R		mov filesize_temp,ecx
 000000AC				outer :  ;//loop until the file end 
 000000AC  B9 00000004				mov ecx, 4
 000000B1					inner:  ;//loop on fields
 000000B1  51						push ecx
 000000B2  8B 0D 00002D96 R				mov ecx, fileSize_temp
 000000B8  89 3D 00002DC6 R				mov startF, edi
 000000BE  FC						cld
 000000BF  F2/ AE					repne scasb;// move edi to the offset that have (,)
 000000C1  89 3D 00002DCA R				mov endF, edi
 000000C7  FF 0D 00002DCA R				dec endf
 000000CD  59						pop ecx
 000000CE  8B 1D 00002DCA R				mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 000000D4  2B 1D 00002DC6 R				sub ebx, startF
 000000DA  29 1D 00002D96 R				sub filesize_temp,ebx
 000000E0  FF 0D 00002D96 R				dec filesize_temp  ;//for delamter ','
 000000E6  57						push edi
							;// fill arrays with data between startF and endF
 000000E7  83 F9 03					cmp ecx, 3
 000000EA  74 24					je N
 000000EC  83 F9 02					cmp ecx, 2
 000000EF  74 34					je G
 000000F1  83 F9 01					cmp ecx, 1
 000000F4  74 49					je A
 000000F6						i:
 000000F6  8B 3D 00002DB6 R				mov edi, idPtr
 000000FC  83 C7 03					add edi, id_element_size-1
 000000FF  83 05 00002DB6 R				add idPtr, id_element_size
	   04
 00000106  8B 35 00002DCA R				mov esi, endf
 0000010C  4E						dec esi    ;//last byte in id
 0000010D  FD						std
 0000010E  EB 42					jmp next
 00000110						N :
 00000110  8B 3D 00002DBA R				mov edi, namePtr
 00000116  83 05 00002DBA R				add namePtr, name_element_size
	   14
 0000011D  8B 35 00002DC6 R				mov esi, startf
 00000123  EB 2D					jmp next
 00000125						G :
 00000125  8B 3D 00002DBE R				mov edi, gradePtr
 0000012B  83 C7 02					add edi, grade_element_size-1
 0000012E  83 05 00002DBE R				add gradePtr, grade_element_size
	   03
 00000135  8B 35 00002DCA R				mov esi, endf
 0000013B  4E						dec esi
 0000013C  FD						std
 0000013D  EB 13					jmp next
 0000013F						A :
 0000013F  8B 3D 00002DC2 R				mov edi, alphaGradePtr
 00000145  83 05 00002DC2 R				add alphaGradePtr, 1
	   01
 0000014C  8B 35 00002DC6 R				mov esi, startF
 00000152						next :
 00000152  83 FB 00					cmp ebx,0
 00000155  74 06					je done
 00000157  51						push ecx
 00000158  8B CB					mov ecx, ebx
 0000015A  F3/ A4					rep movsb
 0000015C  59						pop ecx	
 0000015D						done:
 0000015D  5F						pop edi
 0000015E  49						dec ecx
 0000015F  0F 85 FFFFFF4C			jnz inner
 00000165  83 C7 02				add edi, 2
 00000168  83 2D 00002D96 R			sub filesize_temp,2 ;//for new line
	   02
 0000016F  FF 05 00002D9A R			inc student_count
 00000175  83 3D 00002D96 R		cmp filesize_temp,0		
	   00
 0000017C  0F 87 FFFFFF2A		ja outer
 00000182  61				popad
 00000183  C3				ret
 00000184			SplitBuffer endp

 00000184			OpenDatabase proc, f_Name:ptr byte, key:byte
					;//open the file
 00000184  55		   *	    push   ebp
 00000185  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 00000187  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000018A  E8 FFFFFE71	   *	    call   Open_Createfile
 0000018F  A3 00000004 R		mov filehandle, eax
					;//load the file in buffer
					INVOKE ReadFile,
					filehandle,offset buffer,BUFSIZE,offset fileSize,NULL
 00000194  6A 00	   *	    push   +000000000h
 00000196  68 00002D92 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 0000019B  68 00001400	   *	    push   +000001400h
 000001A0  68 00000008 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000001A5  FF 35 00000004 R *	    push   filehandle
 000001AB  E8 00000000 E   *	    call   ReadFile
					;//decrypt data 
 000001B0  8B 0D 00002D92 R		mov ecx, fileSize
 000001B6  83 F9 00			cmp ecx,0
 000001B9  74 05			je done
					;INVOKE encrypt_or_decrypt_buffer,key
					;// fill the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr"
 000001BB  E8 FFFFFEB0			call SplitBuffer  
 000001C0				done:
					;//close the file
					INVOKE CloseHandle,filehandle
 000001C0  FF 35 00000004 R *	    push   filehandle
 000001C6  E8 00000000 E   *	    call   CloseHandle
					ret
 000001CB  C9		   *	    leave  
 000001CC  C2 0008	   *	    ret    00008h
 000001CF			OpenDatabase endp  
source.asm(166) : warning A6004:procedure argument or local not referenced : key

 000001CF			fillBuffer proc
 000001CF  BF 00000008 R		mov edi,offset buffer
 000001D4  C7 05 00002DB6 R		mov idPtr, offset idArr
	   0000280A R
 000001DE  C7 05 00002DBA R		mov namePtr, offset nameArr
	   000028D3 R
 000001E8  C7 05 00002DBE R		mov gradePtr, offset gradeArr
	   00002CBC R
 000001F2  C7 05 00002DC2 R		mov alphaGradePtr, offset alphaGradeArr 
	   00002D53 R
					;//clear the buffer
					invoke initialize , edi , 0 , fileSize
 000001FC  FF 35 00002D92 R *	    push   fileSize
 00000202  6A 00	   *	    push   +000000000h
 00000204  57		   *	    push   edi
 00000205  E8 FFFFFE4D	   *	    call   initialize
 0000020A  8B 0D 00002D9A R		mov ecx , student_count
 00000210				OUTER :
 00000210  51				push ecx
						;//copy id
 00000211  8B 35 00002DB6 R			mov esi, idPtr
 00000217  B9 00000004				mov ecx, id_element_size
 0000021C					L1 :
 0000021C  80 3E 2B				cmp byte ptr[esi], '+'
 0000021F  74 05				je N1      ;//next byte
 00000221  8A 06					mov al,[esi]
 00000223  88 07					mov [edi],al
 00000225  47						inc edi
 00000226					N1 :	
 00000226  46						inc esi 
 00000227  E2 F3				loop L1
 00000229  83 05 00002DB6 R			add idPtr, id_element_size
	   04
						;//write (,)
 00000230  C6 07 2C				mov byte ptr[edi], ','
 00000233  47					inc edi
						;//copy name
 00000234  8B 35 00002DBA R			mov esi, namePtr
 0000023A  B9 00000014				mov ecx, name_element_size
 0000023F					L2 :
 0000023F  80 3E 2B				cmp byte ptr[esi], '+'
 00000242  74 03				je N2    ;// break the loop
 00000244  A4						movsb
 00000245  E2 F8				loop L2
 00000247					N2 :
 00000247  83 05 00002DBA R			add namePtr, name_element_size
	   14
						;//write (,)
 0000024E  C6 07 2C				mov byte ptr[edi], ','
 00000251  47					inc edi
						;//copy Grade
 00000252  8B 35 00002DBE R			mov esi, gradePtr
 00000258  B9 00000003				mov ecx, grade_element_size
 0000025D					L3 :
 0000025D  80 3E 2B				cmp byte ptr[esi], '+'
 00000260  74 05				je N3      ;//next byte
 00000262  8A 06					mov al,[esi]
 00000264  88 07					mov [edi],al
 00000266  47						inc edi
 00000267					N3 :	
 00000267  46						inc esi 
 00000268  E2 F3				loop L3
 0000026A  83 05 00002DBE R			add gradePtr, grade_element_size
	   03
						;//write (,)
 00000271  C6 07 2C				mov byte ptr[edi], ','
 00000274  47					inc edi
						;//copy alphaGrade
 00000275  8B 35 00002DC2 R			mov esi, alphaGradePtr
 0000027B  80 3E 2B				cmp byte ptr[esi], '+'
 0000027E  74 01				je N4
 00000280  A4						movsb
 00000281					N4:
 00000281  FF 05 00002DC2 R			inc alphaGradePtr
						;//write (,)
 00000287  C6 07 2C				mov byte ptr[edi], ','
 0000028A  47					inc edi
						;//add new line
 0000028B  C6 07 0D				mov byte ptr[edi], 13
 0000028E  47					inc edi
 0000028F  C6 07 0A				mov byte ptr[edi], 10
 00000292  47					inc edi
 00000293  59					pop ecx
 00000294  49					dec ecx	
 00000295  0F 85 FFFFFF75			jnz OUTER
 0000029B  C3					ret
 0000029C			fillBuffer endp

 0000029C			SaveDatabase proc, f_Name:ptr byte, key:byte
					;//open the file
 0000029C  55		   *	    push   ebp
 0000029D  8B EC	   *	    mov    ebp, esp
					INVOKE Clear_Createfile,f_Name
 0000029F  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002A2  E8 FFFFFD7A	   *	    call   CLEAR_Createfile
 000002A7  A3 00000004 R		mov filehandle,eax
 000002AC  8B 0D 00002D92 R		mov ecx, fileSize
 000002B2  83 F9 00			cmp ecx,0
 000002B5  74 22			je done
					;// load the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr" in buffer
 000002B7  E8 FFFFFF13			call fillBuffer
					;//encrypt data 
					;INVOKE encrypt_or_decrypt_buffer, key
					;//write data in the file
					INVOKE WriteFile,
					filehandle,offset buffer,fileSize,offset fileSize,null
 000002BC  6A 00	   *	    push   +000000000h
 000002BE  68 00002D92 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 000002C3  FF 35 00002D92 R *	    push   fileSize
 000002C9  68 00000008 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000002CE  FF 35 00000004 R *	    push   filehandle
 000002D4  E8 00000000 E   *	    call   WriteFile
 000002D9				done:
					;//close the file
					INVOKE CloseHandle,filehandle
 000002D9  FF 35 00000004 R *	    push   filehandle
 000002DF  E8 00000000 E   *	    call   CloseHandle
					ret
 000002E4  C9		   *	    leave  
 000002E5  C2 0008	   *	    ret    00008h
 000002E8			SaveDatabase endp  
source.asm(263) : warning A6004:procedure argument or local not referenced : key

 000002E8			EnrollStudent proc,s_id:ptr byte,s_name:ptr byte, id_size: dword, name_size: dword		
					;//store id
 000002E8  55		   *	    push   ebp
 000002E9  8B EC	   *	    mov    ebp, esp
 000002EB  FD				std
 000002EC  BF 0000280A R		mov edi , offset idArr
 000002F1  BA 00000000			mov edx , 0
 000002F6  A1 00002D9A R		mov eax , student_count
 000002FB  BB 00000004			mov ebx , id_element_size
 00000300  F7 E3			mul ebx
 00000302  03 F8			add edi , eax
 00000304  83 C7 03			add edi , id_element_size-1
 00000307  8B 75 08			mov esi , s_id
 0000030A  03 75 10			add esi , id_size 
 0000030D  4E				dec esi
 0000030E  8B 4D 10			mov ecx , id_size
 00000311  F3/ A4			rep movsb
					;//store name
 00000313  FC				cld
 00000314  BF 000028D3 R		mov edi , offset nameArr
 00000319  BA 00000000			mov edx , 0
 0000031E  A1 00002D9A R		mov eax , student_count
 00000323  BB 00000014			mov ebx , name_element_size
 00000328  F7 E3			mul ebx
 0000032A  03 F8			add edi , eax
 0000032C  8B 75 0C			mov esi , s_name
 0000032F  8B 4D 14			mov ecx , name_size
 00000332  F3/ A4			rep movsb
					;//increment file size
 00000334  8B 45 10			mov eax, id_size
 00000337  03 45 14			add eax, name_size
 0000033A  83 C0 06			add eax, 6 ;//for 4delemter ','and new line 
 0000033D  01 05 00002D92 R		add fileSize, eax
 00000343  FF 05 00002D9A R		inc student_count
					ret
 00000349  C9		   *	    leave  
 0000034A  C2 0010	   *	    ret    00010h
 0000034D			EnrollStudent endp

 0000034D			getIdIndex proc USES edi esi ecx ebx , s_id:ptr byte, s_id_size : dword

 0000034D  55		   *	    push   ebp
 0000034E  8B EC	   *	    mov    ebp, esp
 00000350  57		   *	    push   edi
 00000351  56		   *	    push   esi
 00000352  51		   *	    push   ecx
 00000353  53		   *	    push   ebx
					invoke initialize ,offset id_temp ,'+',id_element_size
 00000354  6A 04	   *	    push   +000000004h
 00000356  6A 2B	   *	    push   +00000002Bh
 00000358  68 00002D86 R   *	    push   dword  ptr OFFSET FLAT: id_temp
 0000035D  E8 FFFFFCF5	   *	    call   initialize
 00000362  FD				std
 00000363  BF 00002D86 R		mov edi , offset id_temp
 00000368  83 C7 03			add edi , id_element_size-1
 0000036B  8B 75 08			mov esi , s_id
 0000036E  03 75 0C			add esi , s_id_size 
 00000371  4E				dec esi
 00000372  8B 4D 0C			mov ecx , s_id_size
 00000375  F3/ A4			rep movsb

 00000377  BB 0000280A R		mov ebx, offset idArr
 0000037C  B8 00000000			mov eax, 0
 00000381  FC				cld 
 00000382				check :
 00000382  3B 05 00002D9A R		cmp eax , student_count
 00000388  74 16				je fail 
 0000038A  BE 00002D86 R			mov esi, offset id_temp 
 0000038F  8B FB				mov edi, ebx
 00000391  B9 00000004				mov ecx, id_element_size
 00000396  F3/ A6				repe cmpsb
 00000398  74 0B				je found  ;//break
 0000039A  83 C3 04				add ebx,id_element_size ;//next element
 0000039D  40					inc eax 
 0000039E  EB E2				jmp check
 000003A0				fail :
 000003A0  B8 FFFFFFFF				mov eax, -1
 000003A5				found :
					ret
 000003A5  5B		   *	    pop    ebx
 000003A6  59		   *	    pop    ecx
 000003A7  5E		   *	    pop    esi
 000003A8  5F		   *	    pop    edi
 000003A9  C9		   *	    leave  
 000003AA  C2 0008	   *	    ret    00008h
 000003AD			getIdIndex endp

 000003AD			AlphaGrade proc USES esi edi ecx , grade: ptr byte
 000003AD  55		   *	    push   ebp
 000003AE  8B EC	   *	    mov    ebp, esp
 000003B0  56		   *	    push   esi
 000003B1  57		   *	    push   edi
 000003B2  51		   *	    push   ecx
 00002DCE				.data
 00002DCE 2B 36 30 00			gradeF byte "+60", 0
 00002DD2 2B 37 30 00			gradeD byte "+70", 0
 00002DD6 2B 38 30 00			gradeC byte "+80", 0
 00002DDA 2B 39 30 00			gradeB byte "+90", 0
 000003B3				.code
 000003B3  FC				cld 
 000003B4  8B 75 08			mov esi,  grade
 000003B7  BF 00002DCE R		mov edi, offset gradeF
 000003BC  B9 00000003			mov ecx, 3
 000003C1  F3/ A6			repe cmpsb
 000003C3  72 43			jb FG

 000003C5  8B 75 08			mov esi,  grade
 000003C8  BF 00002DD2 R		mov edi, offset gradeD
 000003CD  B9 00000003			mov ecx, 3
 000003D2  F3/ A6			repe cmpsb
 000003D4  72 2E			jb DG

 000003D6  8B 75 08			mov esi,  grade
 000003D9  BF 00002DD6 R		mov edi, offset gradeC
 000003DE  B9 00000003			mov ecx, 3
 000003E3  F3/ A6			repe cmpsb
 000003E5  72 19			jb CG

 000003E7  8B 75 08			mov esi,  grade
 000003EA  BF 00002DDA R		mov edi, offset gradeB
 000003EF  B9 00000003			mov ecx, 3
 000003F4  F3/ A6			repe cmpsb
 000003F6  72 04			jb BG

 000003F8				AG :
 000003F8  B0 41			mov al, 'A'
 000003FA  EB 0E			jmp done
 000003FC				BG :
 000003FC  B0 42			mov al, 'B'
 000003FE  EB 0A			jmp done
 00000400				CG :
 00000400  B0 43			mov al, 'C'
 00000402  EB 06			jmp done
 00000404				DG :
 00000404  B0 44			mov al, 'D'
 00000406  EB 02			jmp done
 00000408				FG :
 00000408  B0 46			mov al, 'F'
 0000040A				done :
					ret
 0000040A  59		   *	    pop    ecx
 0000040B  5F		   *	    pop    edi
 0000040C  5E		   *	    pop    esi
 0000040D  C9		   *	    leave  
 0000040E  C2 0004	   *	    ret    00004h
 00000411			AlphaGrade endp

 00000411			DeleteStudent proc,s_id:ptr byte, s_id_size:dword
 00000411  55		   *	    push   ebp
 00000412  8B EC	   *	    mov    ebp, esp
 00000414  60				pushad
					invoke getIdIndex,s_id, s_id_size
 00000415  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 00000418  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000041B  E8 FFFFFF2D	   *	    call   getIdIndex
 00000420  FC				cld
					;// moving ids back
 00000421  A3 00002D9E R		mov id_index_temp , eax
 00000426  BB 00000004			mov ebx , id_element_size
 0000042B  F7 E3			mul ebx
 0000042D  BF 0000280A R		mov edi,offset idArr
 00000432  03 F8			add edi,eax
 00000434  57				push edi
 00000435  50				push eax
 00000436  B9 00000004			mov ecx, id_element_size
 0000043B  B0 2B			mov al,'+'
 0000043D  F3/ AE			repe scasb
 0000043F  29 0D 00002D92 R		sub fileSize,ecx
 00000445  83 2D 00002D92 R		sub fileSize,2
	   02
 0000044C  58				pop eax
 0000044D  5F				pop edi
 0000044E  B9 000000C9			mov ecx,sizeof idArr
 00000453  2B C8			sub ecx,eax
 00000455  83 E9 05			sub ecx,5
 00000458  8B F7			mov esi,edi
 0000045A  83 C6 04			add esi,4
 0000045D  F3/ A4			rep movsb
					;// moving name back
 0000045F  A1 00002D9E R		mov eax,id_index_temp
 00000464  BB 00000014			mov ebx,20
 00000469  F7 E3			mul ebx
 0000046B  BF 000028D3 R		mov edi,offset nameArr
 00000470  03 F8			add edi,eax
 00000472  57				push edi
 00000473  50				push eax
 00000474  B9 00000014			mov ecx, name_element_size
 00000479  B0 2B			mov al,'+'
 0000047B  F2/ AE			repne scasb
 0000047D  83 2D 00002D92 R		sub fileSize,name_element_size
	   14
 00000484  01 0D 00002D92 R		add fileSize,ecx
 0000048A  58				pop eax
 0000048B  5F				pop edi
 0000048C  B9 000003E9			mov ecx,sizeof nameArr
 00000491  2B C8			sub ecx,eax
 00000493  83 E9 15			sub ecx,21
 00000496  8B F7			mov esi,edi
 00000498  83 C6 14			add esi,20
 0000049B  F3/ A4			rep movsb
					;// moving grades back
 0000049D  A1 00002D9E R		mov eax,id_index_temp
 000004A2  BB 00000003			mov ebx,3
 000004A7  F7 E3			mul ebx
 000004A9  BF 00002CBC R		mov edi,offset gradeArr
 000004AE  03 F8			add edi,eax
 000004B0  57				push edi
 000004B1  50				push eax
 000004B2  B9 00000003			mov ecx, grade_element_size
 000004B7  B0 2B			mov al,'+'
 000004B9  F3/ AE			repe scasb
 000004BB  74 0C			je G_empety
 000004BD  29 0D 00002D92 R		sub fileSize,ecx
 000004C3  FF 0D 00002D92 R		dec fileSize
 000004C9				G_empety:
 000004C9  FF 0D 00002D92 R		dec fileSize
 000004CF  58				pop eax
 000004D0  5F				pop edi
 000004D1  B9 00000097			mov ecx,sizeof gradeArr
 000004D6  2B C8			sub ecx,eax
 000004D8  83 E9 04			sub ecx,4
 000004DB  8B F7			mov esi,edi
 000004DD  83 C6 03			add esi,3
 000004E0  F3/ A4			rep movsb
					;// moving alphaGrade
 000004E2  BF 00002D53 R		mov edi,offset AlphagradeArr
 000004E7  03 3D 00002D9E R		add edi,id_index_temp
 000004ED  80 3F 2B			cmp byte ptr[edi],'+'
 000004F0  74 06			je A_empety
 000004F2  FF 0D 00002D92 R		dec fileSize
 000004F8				A_empety:
 000004F8  FF 0D 00002D92 R		dec fileSize
 000004FE  B9 00000033			mov ecx,sizeof alphagradeArr
 00000503  2B 0D 00002D9E R		sub ecx,id_index_temp
 00000509  83 E9 02			sub ecx,2
 0000050C  8B F7			mov esi,edi
 0000050E  83 C6 01			add esi,1
 00000511  F3/ A4			rep movsb
 00000513  83 2D 00002D92 R		sub fileSize,2
	   02
 0000051A  FF 0D 00002D9A R		dec student_count
 00000520  61				popad
					ret 
 00000521  C9		   *	    leave  
 00000522  C2 0008	   *	    ret    00008h
 00000525			DeleteStudent endp 

 00000525			UpdateGrade proc, s_id:ptr byte, s_grade:ptr byte, s_id_size:dword, s_grade_size:dword
 00000525  55		   *	    push   ebp
 00000526  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 00000528  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 0000052B  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000052E  E8 FFFFFE1A	   *	    call   getIdIndex
 00000533  A3 00002D9E R		mov id_index_temp,eax
 00000538  BB 00000003			mov ebx,grade_element_size
 0000053D  F7 E3			mul ebx
 0000053F  BF 00002CBC R		mov edi,offset gradeArr
 00000544  03 F8			add edi,eax
 00000546  89 3D 00002D8A R		mov grade_index,edi
 0000054C  57				push edi
 0000054D  BE 00002D8E R			mov esi , offset empty_grade
 00000552  B9 00000003				mov ecx , grade_element_size
 00000557  F3/ A6				repe cmpsb
 00000559  75 0F				jne full ;//there is a value in it 
 0000055B  8B 5D 14					mov ebx,s_grade_size 
 0000055E  01 1D 00002D92 R				add fileSize ,ebx  ;//increment with grade size
 00000564  FF 05 00002D92 R				inc fileSize       ;//increment with alpha grade size
 0000056A					full :
 0000056A  5F				pop edi
 0000056B  83 C7 02			add edi,grade_element_size-1
 0000056E  8B 75 0C			mov esi,s_grade
 00000571  03 75 14			add esi,s_grade_size
 00000574  4E				dec esi
 00000575  8B 4D 14			mov ecx,s_grade_size 
 00000578  FD				std 
 00000579  F3/ A4			rep movsb
 0000057B  BF 00002D53 R		mov edi,offset alphaGradeArr
 00000580  03 3D 00002D9E R		add edi,id_index_temp
					INVOKE AlphaGrade,grade_index
 00000586  FF 35 00002D8A R *	    push   grade_index
 0000058C  E8 FFFFFE1C	   *	    call   AlphaGrade
 00000591  88 07			mov [edi],al
					ret
 00000593  C9		   *	    leave  
 00000594  C2 0010	   *	    ret    00010h
 00000597			UpdateGrade endp  

 00000597			DisStudentData proc,s_id:ptr byte,s_id_size:dword,s_name:ptr byte,s_grade:ptr byte,s_A_grade:ptr byte
 00000597  55		   *	    push   ebp
 00000598  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 0000059A  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 0000059D  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000005A0  E8 FFFFFDA8	   *	    call   getIdIndex
 000005A5  A3 00002D9E R		mov id_index_temp,eax
 000005AA  BA 00000000			mov edx,0
 000005AF  BE 000028D3 R		mov esi ,offset nameArr
 000005B4  BB 00000014			mov ebx , name_element_size
 000005B9  F7 E3			mul ebx
 000005BB  03 F0			add esi,eax
 000005BD  8B 7D 10			mov edi,s_name
 000005C0  B9 00000014			mov ecx, name_element_size
 000005C5				n:
 000005C5  8A 06				mov al ,[esi]
 000005C7  3C 2B				cmp al,'+'
 000005C9  74 06				je name_finished
 000005CB  88 07				mov [edi],al
 000005CD  47					inc edi
 000005CE  46					inc esi
 000005CF  E2 F4			loop n
 000005D1				name_finished:

 000005D1  A1 00002D9E R		mov eax , id_index_temp
 000005D6  BE 00002CBC R		mov esi , offset gradeArr
 000005DB  BB 00000003			mov ebx , grade_element_size
 000005E0  F7 E3			mul ebx
 000005E2  03 F0			add esi,eax
 000005E4  8B 7D 14			mov edi,s_grade
 000005E7  B9 00000003			mov ecx, grade_element_size
 000005EC				g:
 000005EC  8A 06				mov al ,[esi]
 000005EE  3C 2B				cmp al,'+'
 000005F0  74 03				je next  ;//next byte 
 000005F2  88 07				mov [edi],al
 000005F4  47					inc edi
 000005F5					next :
 000005F5  C6 07 20				mov byte ptr[edi],' '
 000005F8  46					inc esi
 000005F9  E2 F1			loop g

 000005FB  BE 00002D53 R		mov esi , offset AlphagradeArr
 00000600  03 35 00002D9E R		add esi , id_index_temp
 00000606  8B 7D 18			mov edi , s_A_grade
 00000609  8A 06			mov al ,[esi]
 0000060B  3C 2B			cmp al,'+'
 0000060D  74 03			je done
 0000060F  88 07				mov [edi],al
 00000611  47					inc edi
 00000612				done:
 00000612  C6 07 20				mov byte ptr[edi],' '
					ret
 00000615  C9		   *	    leave  
 00000616  C2 0014	   *	    ret    00014h
 00000619			DisStudentData endp

 00000619			Swap proc USES esi edi ecx, sizes:dword,ptr1:ptr byte 
 00000619  55		   *	    push   ebp
 0000061A  8B EC	   *	    mov    ebp, esp
 0000061C  56		   *	    push   esi
 0000061D  57		   *	    push   edi
 0000061E  51		   *	    push   ecx
 0000061F  8B 75 0C			mov esi,ptr1
 00000622  BF 00002DA2 R		mov edi,offset temp1
 00000627  8B 4D 08			mov ecx,sizes
 0000062A  F3/ A4			rep movsb 

 0000062C  8B 75 0C			mov esi,ptr1
 0000062F  03 75 08			add esi,sizes
 00000632  8B 7D 0C			mov edi,ptr1
 00000635  8B 4D 08			mov ecx,sizes
 00000638  F3/ A4			rep movsb 

 0000063A  8B 7D 0C			mov edi,ptr1
 0000063D  03 7D 08			add edi,sizes
 00000640  BE 00002DA2 R		mov esi,offset temp1
 00000645  8B 4D 08			mov ecx,sizes
 00000648  F3/ A4			rep movsb
					ret
 0000064A  59		   *	    pop    ecx
 0000064B  5F		   *	    pop    edi
 0000064C  5E		   *	    pop    esi
 0000064D  C9		   *	    leave  
 0000064E  C2 0008	   *	    ret    00008h
 00000651			Swap endp

 00000651			BubbleSort PROC, Count:DWORD, sortType:byte
 00000651  55		   *	    push   ebp
 00000652  8B EC	   *	    mov    ebp, esp
 00000654  8B 4D 08			mov ecx,Count
 00000657  49				dec ecx;//decrement count by 1
 00000658				L1: 
 00000658  51				push ecx ;//save outer loop count
 00000659  C7 05 00002DB6 R		mov idPtr, offset idArr
	   0000280A R
 00000663  C7 05 00002DBA R		mov namePtr, offset nameArr
	   000028D3 R
 0000066D  C7 05 00002DBE R		mov gradePtr, offset gradeArr
	   00002CBC R
 00000677  C7 05 00002DC2 R		mov alphaGradePtr, offset alphaGradeArr
	   00002D53 R
 00000681				L2:
 00000681  51				push ecx
 00000682  B9 00000004			mov ecx, 4
 00000687  8B 35 00002DB6 R		mov esi,idPtr
 0000068D  8B FE			mov edi, esi
 0000068F  83 C7 04			add edi, 4
 00000692  B0 41			mov al, 'A'
 00000694  38 45 0C			cmp sortType, al
 00000697  74 06			je ascending
 00000699  F3/ A6			repe cmpsb ;//compare a pair of values 
 0000069B  73 3A			jae next ;//if [idPtr] <= [idPtr+4], no exchange
 0000069D  EB 04			jmp done
 0000069F				ascending:
 0000069F  F3/ A6			repe cmpsb;//compare a pair of values 
 000006A1  76 34			jbe next;//if [idPtr] <= [idPtr+4], no exchange
 000006A3				done:
					invoke swap,4, idPtr
 000006A3  FF 35 00002DB6 R *	    push   idPtr
 000006A9  6A 04	   *	    push   +000000004h
 000006AB  E8 FFFFFF69	   *	    call   Swap
					invoke swap,20, namePtr
 000006B0  FF 35 00002DBA R *	    push   namePtr
 000006B6  6A 14	   *	    push   +000000014h
 000006B8  E8 FFFFFF5C	   *	    call   Swap
					invoke swap,3, gradePtr
 000006BD  FF 35 00002DBE R *	    push   gradePtr
 000006C3  6A 03	   *	    push   +000000003h
 000006C5  E8 FFFFFF4F	   *	    call   Swap
					invoke swap,1, alphaGradePtr
 000006CA  FF 35 00002DC2 R *	    push   alphaGradePtr
 000006D0  6A 01	   *	    push   +000000001h
 000006D2  E8 FFFFFF42	   *	    call   Swap

 000006D7				next: 
 000006D7  83 05 00002DB6 R		add idPtr,4 ;//move both pointers forward
	   04
 000006DE  83 05 00002DBA R		add namePtr,20 ;//move both pointers forward
	   14
 000006E5  83 05 00002DBE R		add gradePtr,3 ;//move both pointers forward
	   03
 000006EC  83 05 00002DC2 R		add alphaGradePtr,1 ;//move both pointers forward
	   01
 000006F3  59				pop ecx
 000006F4  E2 8B			loop L2 ;//inner loop
 000006F6  59				pop ecx ;//retrieve outer loop count
 000006F7  49				dec ecx
 000006F8  0F 85 FFFFFF5A		jnz L1 ;//else repeat outer loop
					ret
 000006FE  C9		   *	    leave  
 000006FF  C2 0008	   *	    ret    00008h
 00000702			BubbleSort ENDP

 00000702			GenerateReport proc,f_name:ptr byte, sortType:byte
 00000702  55		   *	    push   ebp
 00000703  8B EC	   *	    mov    ebp, esp
					invoke BubbleSort, student_count, sortType
 00000705  8A 45 0C	   *	    mov    al, byte  ptr ss:[ebp]+00Ch
 00000708  50		   *	    push   eax
 00000709  FF 35 00002D9A R *	    push   student_count
 0000070F  E8 FFFFFF3D	   *	    call   BubbleSort
					invoke SaveDatabase, f_name, 170
 00000714  68 000000AA	   *	    push   +0000000AAh
 00000719  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000071C  E8 FFFFFB7B	   *	    call   SaveDatabase
					ret
 00000721  C9		   *	    leave  
 00000722  C2 0008	   *	    ret    00008h
 00000725			GenerateReport endp


 00000725			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 00000725  55		   *	    push   ebp
 00000726  8B EC	   *	    mov    ebp, esp
 00000728  B8 00000001			mov eax, 1;//Return true to caller. 
					ret 
 0000072D  C9		   *	    leave  
 0000072E  C2 000C	   *	    ret    0000Ch
 00000731			DllMain ENDP
source.asm(628) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(628) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(628) : warning A6004:procedure argument or local not referenced : lpReserved


				END DllMain
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/25/17 09:42:35
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002DDE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000731 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AlphaGrade . . . . . . . . . . .	P Near	 000003AD _TEXT	Length= 00000064 Public STDCALL
  grade  . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 000003F8 _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 000003FC _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 00000400 _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 00000404 _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 00000408 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000040A _TEXT	
BubbleSort . . . . . . . . . . .	P Near	 00000651 _TEXT	Length= 000000B1 Public STDCALL
  Count  . . . . . . . . . . . .	DWord	 bp + 00000008
  sortType . . . . . . . . . . .	Byte	 bp + 0000000C
  L1 . . . . . . . . . . . . . .	L Near	 00000658 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000681 _TEXT	
  ascending  . . . . . . . . . .	L Near	 0000069F _TEXT	
  done . . . . . . . . . . . . .	L Near	 000006A3 _TEXT	
  next . . . . . . . . . . . . .	L Near	 000006D7 _TEXT	
CLEAR_Createfile . . . . . . . .	P Near	 00000021 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeleteStudent  . . . . . . . . .	P Near	 00000411 _TEXT	Length= 00000114 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  G_empety . . . . . . . . . . .	L Near	 000004C9 _TEXT	
  A_empety . . . . . . . . . . .	L Near	 000004F8 _TEXT	
DisStudentData . . . . . . . . .	P Near	 00000597 _TEXT	Length= 00000082 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  s_name . . . . . . . . . . . .	DWord	 bp + 00000010
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000014
  s_A_grade  . . . . . . . . . .	DWord	 bp + 00000018
  n  . . . . . . . . . . . . . .	L Near	 000005C5 _TEXT	
  name_finished  . . . . . . . .	L Near	 000005D1 _TEXT	
  g  . . . . . . . . . . . . . .	L Near	 000005EC _TEXT	
  next . . . . . . . . . . . . .	L Near	 000005F5 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000612 _TEXT	
DllMain  . . . . . . . . . . . .	P Near	 00000725 _TEXT	Length= 0000000C Public STDCALL
  hInstance  . . . . . . . . . .	DWord	 bp + 00000008
  fdwReason  . . . . . . . . . .	DWord	 bp + 0000000C
  lpReserved . . . . . . . . . .	DWord	 bp + 00000010
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnrollStudent  . . . . . . . . .	P Near	 000002E8 _TEXT	Length= 00000065 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  id_size  . . . . . . . . . . .	DWord	 bp + 00000010
  name_size  . . . . . . . . . .	DWord	 bp + 00000014
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateReport . . . . . . . . .	P Near	 00000702 _TEXT	Length= 00000023 Public STDCALL
  f_name . . . . . . . . . . . .	DWord	 bp + 00000008
  sortType . . . . . . . . . . .	Byte	 bp + 0000000C
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenDatabase . . . . . . . . . .	P Near	 00000184 _TEXT	Length= 0000004B Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 000001C0 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Open_Createfile  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveDatabase . . . . . . . . . .	P Near	 0000029C _TEXT	Length= 0000004C Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 000002D9 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SplitBuffer  . . . . . . . . . .	P Near	 00000070 _TEXT	Length= 00000114 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000000AC _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
  i  . . . . . . . . . . . . . .	L Near	 000000F6 _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 00000110 _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 00000125 _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 0000013F _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000152 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000015D _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Swap . . . . . . . . . . . . . .	P Near	 00000619 _TEXT	Length= 00000038 Public STDCALL
  sizes  . . . . . . . . . . . .	DWord	 bp + 00000008
  ptr1 . . . . . . . . . . . . .	DWord	 bp + 0000000C
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGrade  . . . . . . . . . .	P Near	 00000525 _TEXT	Length= 00000072 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_grade  . . . . . . . . . . .	DWord	 bp + 0000000C
  s_id_size  . . . . . . . . . .	DWord	 bp + 00000010
  s_grade_size . . . . . . . . .	DWord	 bp + 00000014
  full . . . . . . . . . . . . .	L Near	 0000056A _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
encrypt_or_decrypt_buffer  . . .	P Near	 00000042 _TEXT	Length= 00000015 Public STDCALL
  key  . . . . . . . . . . . . .	Byte	 bp + 00000008
  L  . . . . . . . . . . . . . .	L Near	 0000004C _TEXT	
fillBuffer . . . . . . . . . . .	P Near	 000001CF _TEXT	Length= 000000CD Public STDCALL
  OUTER  . . . . . . . . . . . .	L Near	 00000210 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000021C _TEXT	
  N1 . . . . . . . . . . . . . .	L Near	 00000226 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000023F _TEXT	
  N2 . . . . . . . . . . . . . .	L Near	 00000247 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000025D _TEXT	
  N3 . . . . . . . . . . . . . .	L Near	 00000267 _TEXT	
  N4 . . . . . . . . . . . . . .	L Near	 00000281 _TEXT	
getIdIndex . . . . . . . . . . .	P Near	 0000034D _TEXT	Length= 00000060 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  check  . . . . . . . . . . . .	L Near	 00000382 _TEXT	
  fail . . . . . . . . . . . . .	L Near	 000003A0 _TEXT	
  found  . . . . . . . . . . . .	L Near	 000003A5 _TEXT	
initialize . . . . . . . . . . .	P Near	 00000057 _TEXT	Length= 00000019 Public STDCALL
  dist . . . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	Byte	 bp + 0000000C
  dist_size  . . . . . . . . . .	DWord	 bp + 00000010
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFSIZE  . . . . . . . . . . . .	Number	 00001400h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
alphaGradeArr  . . . . . . . . .	Byte	 00002D53 _DATA	
alphaGradePtr  . . . . . . . . .	DWord	 00002DC2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000008 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
empty_grade  . . . . . . . . . .	Byte	 00002D8E _DATA	
endF . . . . . . . . . . . . . .	DWord	 00002DCA _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00002D92 _DATA	
filehandle . . . . . . . . . . .	DWord	 00000004 _DATA	
filesize_temp  . . . . . . . . .	DWord	 00002D96 _DATA	
gradeArr . . . . . . . . . . . .	Byte	 00002CBC _DATA	
gradeB . . . . . . . . . . . . .	Byte	 00002DDA _DATA	
gradeC . . . . . . . . . . . . .	Byte	 00002DD6 _DATA	
gradeD . . . . . . . . . . . . .	Byte	 00002DD2 _DATA	
gradeF . . . . . . . . . . . . .	Byte	 00002DCE _DATA	
gradePtr . . . . . . . . . . . .	DWord	 00002DBE _DATA	
grade_element_size . . . . . . .	Number	 00000003h   
grade_index  . . . . . . . . . .	DWord	 00002D8A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idArr  . . . . . . . . . . . . .	Byte	 0000280A _DATA	
idPtr  . . . . . . . . . . . . .	DWord	 00002DB6 _DATA	
id_element_size  . . . . . . . .	Number	 00000004h   
id_index_temp  . . . . . . . . .	DWord	 00002D9E _DATA	
id_temp  . . . . . . . . . . . .	Byte	 00002D86 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max_student_count  . . . . . . .	Number	 00000032h   
nameArr  . . . . . . . . . . . .	Byte	 000028D3 _DATA	
namePtr  . . . . . . . . . . . .	DWord	 00002DBA _DATA	
name_element_size  . . . . . . .	Number	 00000014h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
report_buffer  . . . . . . . . .	Byte	 00001409 _DATA	
report_filehandle  . . . . . . .	DWord	 00000000 _DATA	
startF . . . . . . . . . . . . .	DWord	 00002DC6 _DATA	
student_count  . . . . . . . . .	DWord	 00002D9A _DATA	
temp1  . . . . . . . . . . . . .	Byte	 00002DA2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   5 Warnings
	   0 Errors
