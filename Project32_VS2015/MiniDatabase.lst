<<<<<<< HEAD
Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/21/17 22:27:35
=======
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/20/17 06:13:40
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 00001400				BUFSIZE = 5120;//5kb
 = 0000001E				record_size=30
 = 00000003				grade_size=3
 00000000 00000000			filehandle dword ?
 00000004  00001400 [			buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00001405  00001400 [			new_buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00002806 00000000			fileSize dword 0
 0000280A  00000028 [			idArr byte 40 dup('_'), 0
	    5F
	   ] 00
 00002833  000000C8 [			nameArr byte 200 dup('_'), 0
	    5F
	   ] 00
 000028FC  0000001E [			gradeArr byte 30 dup('_'), 0
	    5F
	   ] 00
 0000291B  0000000A [			alphaGradeArr byte 10 dup('_'), 0
	    5F
	   ] 00
 00002926 00000000			temp2 dword 0
					
 0000292A  00000014 [		temp1 byte 20 dup(0)
	    00
	   ]
 00000000			.code
 00000000			Open_Createfile proc,f_Name:ptr byte
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000003  6A 00	   *	    push   +000000000h
 00000005  68 00000080	   *	    push   +000000080h
 0000000A  6A 04	   *	    push   +000000004h
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  6A 00	   *	    push   +000000000h
 00000010  68 C0000000	   *	    push   +0C0000000h
 00000015  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000018  E8 00000000 E   *	    call   CreateFileA
					ret
 0000001D  C9		   *	    leave  
 0000001E  C2 0004	   *	    ret    00004h
 00000021			Open_Createfile endp

 00000021			OpenDatabase proc,f_Name:ptr byte,kye:byte
					;//open the file
 00000021  55		   *	    push   ebp
 00000022  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 00000024  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000027  E8 FFFFFFD4	   *	    call   Open_Createfile
 0000002C  A3 00000000 R		mov filehandle, eax
					;//load the file in buffer
					INVOKE ReadFile,
					filehandle,offset buffer,BUFSIZE,offset fileSize,NULL
 00000031  6A 00	   *	    push   +000000000h
 00000033  68 00002806 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 00000038  68 00001400	   *	    push   +000001400h
 0000003D  68 00000004 R   *	    push   dword  ptr OFFSET FLAT: buffer
 00000042  FF 35 00000000 R *	    push   filehandle
 00000048  E8 00000000 E   *	    call   ReadFile
					;//decrypt data 
<<<<<<< HEAD
 00000062  8B 0D 00002806 R		mov ecx, fileSize
 00000068  83 F9 00			cmp ecx,0
 0000006B  74 05			je done
					;INVOKE encrypt_or_decrypt_buffer,key
					;// fill the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr"
 0000006D  E8 00000308			call SplitBuffer  
 00000072				done:
=======
 0000004D  BE 00000004 R		mov esi ,offset buffer
 00000052  8B FE			mov edi ,esi
 00000054  8B 0D 00002806 R		mov ecx, fileSize
 0000005A  83 F9 00			cmp ecx,0
 0000005D  74 05			je done
					;L:
						;lodsb
						;xor al,kye
						;stosb
					;loop L
 0000005F  E8 00000215			call SplitBuffer
 00000064				done:
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
					;//close the file
					INVOKE CloseHandle,filehandle
 00000064  FF 35 00000000 R *	    push   filehandle
 0000006A  E8 00000000 E   *	    call   CloseHandle
					ret
<<<<<<< HEAD
 0000007D  C9		   *	    leave  
 0000007E  C2 0008	   *	    ret    00008h
 00000081			OpenDatabase endp
source.asm(52) : warning A6004:procedure argument or local not referenced : key

 00000081			SaveDatabase proc, f_Name:ptr byte, key:byte
					;// load the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr" in buffer
 00000081  55		   *	    push   ebp
 00000082  8B EC	   *	    mov    ebp, esp
 00000084  E8 000000D0			call fillBuffer
=======
 0000006F  C9		   *	    leave  
 00000070  C2 0008	   *	    ret    00008h
 00000073			OpenDatabase endp
source.asm(48) : warning A6004:procedure argument or local not referenced : kye

 00000073			SaveDatabase proc,f_Name:ptr byte,kye:byte
 00000073  55		   *	    push   ebp
 00000074  8B EC	   *	    mov    ebp, esp
 00000076  E8 000000D7			call fillBuffer
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
					;//open the file
					INVOKE Open_Createfile,f_Name
 0000007B  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000007E  E8 FFFFFF7D	   *	    call   Open_Createfile
 00000083  A3 00000000 R		mov filehandle,eax
					;//encrypt data 
 00000088  BE 00000004 R		mov esi ,offset buffer
 0000008D  8B FE			mov edi ,esi
 0000008F  8B 0D 00002806 R		mov ecx, fileSize
					;L:
						;lodsb
						;xor al,kye
						;stosb
					;loop L
					;//write data in the file
					INVOKE WriteFile,
					filehandle,offset buffer,fileSize,offset fileSize,null
 00000095  6A 00	   *	    push   +000000000h
 00000097  68 00002806 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 0000009C  FF 35 00002806 R *	    push   fileSize
 000000A2  68 00000004 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000000A7  FF 35 00000000 R *	    push   filehandle
 000000AD  E8 00000000 E   *	    call   WriteFile
					;//close the file
					INVOKE CloseHandle,filehandle
 000000B2  FF 35 00000000 R *	    push   filehandle
 000000B8  E8 00000000 E   *	    call   CloseHandle
					ret
<<<<<<< HEAD
 000000C4  C9		   *	    leave  
 000000C5  C2 0008	   *	    ret    00008h
 000000C8			SaveDatabase endp
source.asm(69) : warning A6004:procedure argument or local not referenced : key
=======
 000000BD  C9		   *	    leave  
 000000BE  C2 0008	   *	    ret    00008h
 000000C1			SaveDatabase endp
source.asm(70) : warning A6004:procedure argument or local not referenced : kye
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6

 000000C1			EnrollStudent proc,s_id:ptr byte,s_name:ptr byte, id_size: dword, name_size: dword
					;//set pointer to the end of the bufferr
 000000C1  55		   *	    push   ebp
 000000C2  8B EC	   *	    mov    ebp, esp
 000000C4  BF 00000004 R		mov edi , offset buffer 
 000000C9  03 3D 00002806 R		add edi , fileSize			
					;//store id
 000000CF  8B 75 08			mov esi , s_id
 000000D2  8B 4D 10			mov ecx ,id_size
 000000D5  F3/ A4			rep movsb
					;//write (,)
 000000D7  C6 07 2C			mov byte ptr [edi], ','
 000000DA  47				inc edi
					;//store name
 000000DB  8B 75 0C			mov esi , s_name
 000000DE  8B 4D 14			mov ecx , name_size
 000000E1  F3/ A4			rep movsb
					;//write (,)
 000000E3  C6 07 2C			mov byte ptr[edi], ','
 000000E6  47				inc edi
					;//save space to grade and Alpha_gread
 000000E7  83 C7 03			add edi,grade_size 
					;//write (,)
 000000EA  C6 07 2C			mov byte ptr[edi], ','
 000000ED  83 C7 02			add edi,2
					;//write (,)
 000000F0  C6 07 2C			mov byte ptr[edi], ','
 000000F3  47				inc edi
					;//carrying_return
 000000F4  C6 07 0D			mov byte ptr[edi],13		
 000000F7  47				inc edi
					;//line_feed
 000000F8  C6 07 0A			mov byte ptr[edi],10
 000000FB  B8 00000000			mov eax, 0
 00000100  03 45 10			add eax, id_size
 00000103  03 45 14			add eax, name_size
 00000106  83 C0 03			add eax, grade_size
 00000109  83 C0 07			add eax, 7
 0000010C  01 05 00002806 R		add fileSize, eax
					;//calling SplitBuffer to split the first buffer
<<<<<<< HEAD
 00000119  E8 0000025C			call SplitBuffer
=======
 00000112  E8 00000162			call SplitBuffer
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
					ret
 00000117  C9		   *	    leave  
 00000118  C2 0010	   *	    ret    00010h
 0000011B			EnrollStudent endp

 0000011B			getIdIndex proc, s_id:ptr byte, s_id_size : dword
					;// ids should be sortrd to work properly
 0000011B  55		   *	    push   ebp
 0000011C  8B EC	   *	    mov    ebp, esp
 0000011E  BB 0000280A R		mov ebx, offset idArr
 00000123  BA 00000000			mov edx, 0
 00000128				Outer :
 00000128  8B 75 08			mov esi, s_id
 0000012B  8B FB			mov edi, ebx
 0000012D  8B 4D 0C			mov ecx, s_id_size
 00000130				Inner :
 00000130  8A 07			mov al, [edi]
 00000132  38 06			cmp[esi], al
 00000134  75 06			jne fail
 00000136  46				inc esi
 00000137  47				inc edi
 00000138  E2 F6			Loop Inner
 0000013A  EB 10			jmp found
 0000013C				fail :
 0000013C  83 C3 04			add ebx, 4
 0000013F  42				inc edx
 00000140  80 3B 00			cmp byte ptr[ebx], 0
 00000143  75 E3			jne Outer
 00000145  B8 FFFFFFFF			mov eax, -1
 0000014A  EB 02			jmp done
 0000014C				found :
 0000014C  8B C2			mov eax, edx
 0000014E				done :
					ret
 0000014E  C9		   *	    leave  
 0000014F  C2 0008	   *	    ret    00008h
 00000152			getIdIndex endP

<<<<<<< HEAD
 00000159			fillBuffer proc
 0000292A				.data
 0000292A 00000000			idPtr dword ?
 0000292E 00000000			namePtr dword ?
 00002932 00000000			gradePtr dword ?
 00002936 00000000			alphaGradePtr dword ?
 00000159				.code
 00000159  C7 05 0000292A R		mov idPtr, offset idArr
	   0000280A R
 00000163  C7 05 0000292E R		mov namePtr, offset nameArr
	   00002833 R
 0000016D  C7 05 00002932 R		mov gradePtr, offset gradeArr
	   000028FC R
 00000177  C7 05 00002936 R		mov alphaGradePtr, offset alphaGradeArr 
	   0000291B R
					;//clear the buffer
 00000181  B0 00			mov al, 0
 00000183  B9 00001400			mov ecx, BUFSIZE
 00000188  BF 00000004 R		mov edi, offset buffer
 0000018D  F3/ AA			rep stosb
 0000018F  BF 00000004 R		mov edi, offset buffer
 00000194				O :
=======
 00000152			fillBuffer proc
 00000152  BF 00000004 R		mov edi, offset buffer
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
					;//copy id
 00000157  BE 0000280A R		mov esi, offset idArr
 0000015C				L1 :
 0000015C  A4				movsb
 0000015D  4A				dec edx
 0000015E  80 3E 5F			cmp byte ptr[esi], '_'
 00000161  75 F9			jne L1
					;//write (,)
 00000163  C6 07 2C			mov byte ptr[edi], ','
 00000166  47				inc edi
					;//copy name
 00000167  BE 00002833 R		mov esi, offset nameArr
 0000016C				L2 :
 0000016C  A4				movsb
 0000016D  4A				dec edx
 0000016E  80 3E 5F			cmp byte ptr[esi], '_'
 00000171  75 F9			jne L2
					;//write (,)
 00000173  C6 07 2C			mov byte ptr[edi], ','
 00000176  47				inc edi
					;//copy Grade
 00000177  BE 000028FC R		mov esi, offset gradeArr
 0000017C  B9 00000003			mov ecx, 3
 00000181				L3 :
 00000181  A4				movsb
 00000182  4A				dec edx
 00000183  E2 FC			Loop L3
					;//write (,)
 00000185  C6 07 2C			mov byte ptr[edi], ','
 00000188  47				inc edi
					;//copy alphaGrade
 00000189  BE 0000291B R		mov esi, offset alphaGradeArr
 0000018E  A4				movsb
					;//write (,)
 0000018F  C6 07 2C			mov byte ptr[edi], ','
 00000192  47				inc edi
					;//add new line
<<<<<<< HEAD
 00000207  C6 07 0D			mov byte ptr[edi], 13
 0000020A  47				inc edi
 0000020B  C6 07 0A			mov byte ptr[edi], 10
 0000020E  47				inc edi
					;//repet to next record if there is any
 0000020F  8B 1D 0000292A R		mov ebx, idPtr
 00000215  80 3B 00			cmp byte ptr[ebx], 0
 00000218  74 09			je done
 0000021A  80 3B 5F			cmp byte ptr[ebx], '_'
 0000021D  0F 85 FFFFFF71		jne O
 00000223				done :
 00000223  C3				ret
 00000224			fillBuffer endp

 00000224			AlphaGrade proc USES esi edi ecx,
				grade: ptr byte
 00000224  55		   *	    push   ebp
 00000225  8B EC	   *	    mov    ebp, esp
 00000227  56		   *	    push   esi
 00000228  57		   *	    push   edi
 00000229  51		   *	    push   ecx
 0000293A				.data
 0000293A 20 36 30 00			gradeF byte " 60", 0
 0000293E 20 37 30 00			gradeD byte " 70", 0
 00002942 20 38 30 00			gradeC byte " 80", 0
 00002946 20 39 30 00			gradeB byte " 90", 0
 0000022A				.code
 0000022A  8B 75 08			mov esi,  grade
 0000022D  BF 0000293A R		mov edi, offset gradeF
 00000232  B9 00000003			mov ecx, 3
 00000237  F3/ A6			repe cmpsb
 00000239  72 43			jb FG

 0000023B  8B 75 08			mov esi,  grade
 0000023E  BF 0000293E R		mov edi, offset gradeD
 00000243  B9 00000003			mov ecx, 3
 00000248  F3/ A6			repe cmpsb
 0000024A  72 2E			jb DG

 0000024C  8B 75 08			mov esi,  grade
 0000024F  BF 00002942 R		mov edi, offset gradeC
 00000254  B9 00000003			mov ecx, 3
 00000259  F3/ A6			repe cmpsb
 0000025B  72 19			jb CG
=======
 00000193  C6 07 0D			mov byte ptr[edi], 13
 00000196  47				inc edi
 00000197  C6 07 0A			mov byte ptr[edi], 10
 0000019A  47				inc edi
 0000019B  C3				ret
 0000019C			fillBuffer endp

 0000019C			UpdateGrade proc, s_id:ptr byte, s_grade:ptr byte, s_id_size:dword, s_grade_size:dword
 0000019C  55		   *	    push   ebp
 0000019D  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id, s_id_size
 0000019F  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 000001A2  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000001A5  E8 FFFFFF71	   *	    call   getIdIndex
 000001AA  A3 00002926 R	mov temp2,eax
 000001AF  BB 00000003		mov ebx,3
 000001B4  F7 E3		mul ebx
 000001B6  BF 000028FC R	mov edi,offset gradeArr
 000001BB  03 F8		add edi,eax
 000001BD  8B 4D 14		mov ecx,s_grade_size 
 000001C0  8B 75 0C		mov esi,s_grade
 000001C3  F3/ A4		rep movsb
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6

 0000025D  8B 75 08			mov esi,  grade
 00000260  BF 00002946 R		mov edi, offset gradeB
 00000265  B9 00000003			mov ecx, 3
 0000026A  F3/ A6			repe cmpsb
 0000026C  72 04			jb BG

 0000026E				AG :
 0000026E  B0 41			mov al, 'A'
 00000270  EB 0E			jmp done
 00000272				BG :
 00000272  B0 42			mov al, 'B'
 00000274  EB 0A			jmp done
 00000276				CG :
 00000276  B0 43			mov al, 'C'
 00000278  EB 06			jmp done
 0000027A				DG :
 0000027A  B0 44			mov al, 'D'
 0000027C  EB 02			jmp done
 0000027E				FG :
 0000027E  B0 46			mov al, 'F'
 00000280				done :
					ret
 00000280  59		   *	    pop    ecx
 00000281  5F		   *	    pop    edi
 00000282  5E		   *	    pop    esi
 00000283  C9		   *	    leave  
 00000284  C2 0004	   *	    ret    00004h
 00000287			AlphaGrade endp

 00000287			UpdateGrade proc, s_id:ptr byte, s_grade:ptr byte, s_id_size:dword, s_grade_size:dword
 00000287  55		   *	    push   ebp
 00000288  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id, s_id_size
 0000028A  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 0000028D  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000290  E8 FFFFFE8D	   *	    call   getIdIndex
 00000295  A3 00002926 R	mov temp2,eax
 0000029A  BB 00000003		mov ebx,3
 0000029F  F7 E3		mul ebx
 000002A1  BF 000028FC R	mov edi,offset gradeArr
 000002A6  03 F8		add edi,eax
 000002A8  8B 4D 14		mov ecx,s_grade_size 
 000002AB  8B 75 0C		mov esi,s_grade
 000002AE  F3/ A4		rep movsb
 000002B0  BF 0000291B R	mov edi,offset alphaGradeArr
 000002B5  A1 00002926 R	mov eax,temp2
 000002BA  03 F8		add edi,eax
				INVOKE AlphaGrade,s_grade
 000002BC  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 000002BF  E8 FFFFFF60	   *	    call   AlphaGrade
 000002C4  88 07		mov [edi],al
				ret
<<<<<<< HEAD
 000002C6  C9		   *	    leave  
 000002C7  C2 0010	   *	    ret    00010h
 000002CA			UpdateGrade endp

 000002CA			DeleteStudent proc,s_id:ptr byte, s_id_size:dword
 000002CA  55		   *	    push   ebp
 000002CB  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id, s_id_size
 000002CD  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 000002D0  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000002D3  E8 FFFFFE4A	   *	    call   getIdIndex

				;// moving ids back
 000002D8  A3 00002926 R	mov temp2,eax
 000002DD  BB 00000004		mov ebx,4
 000002E2  F7 E3		mul ebx
 000002E4  BF 0000280A R	mov edi,offset idArr
 000002E9  03 F8		add edi,eax
 000002EB  B9 00000029		mov ecx,lengthof idArr
 000002F0  2B C8		sub ecx,eax
 000002F2  83 E9 05		sub ecx,5
 000002F5  8B F7		mov esi,edi
 000002F7  83 C6 04		add esi,4
 000002FA  F3/ A4		rep movsb
				;// moving name back
 000002FC  A1 00002926 R	mov eax,temp2
 00000301  BB 00000014		mov ebx,20
 00000306  F7 E3		mul ebx
 00000308  BF 00002833 R	mov edi,offset nameArr
 0000030D  03 F8		add edi,eax
 0000030F  B9 000000C9		mov ecx,lengthof nameArr
 00000314  2B C8		sub ecx,eax
 00000316  83 E9 15		sub ecx,21
 00000319  8B F7		mov esi,edi
 0000031B  83 C6 14		add esi,20
 0000031E  F3/ A4		rep movsb
				;// moving grades back
 00000320  A1 00002926 R	mov eax,temp2
 00000325  BB 00000003		mov ebx,3
 0000032A  F7 E3		mul ebx
 0000032C  BF 000028FC R	mov edi,offset gradeArr
 00000331  03 F8		add edi,eax
 00000333  B9 0000001F		mov ecx,lengthof gradeArr
 00000338  2B C8		sub ecx,eax
 0000033A  83 E9 04		sub ecx,4
 0000033D  8B F7		mov esi,edi
 0000033F  83 C6 03		add esi,3
 00000342  F3/ A4		rep movsb
				;// moving alphaGrade
 00000344  A1 00002926 R	mov eax,temp2
 00000349  BB 00000003		mov ebx,3
 0000034E  F7 E3		mul ebx
 00000350  BF 0000291B R	mov edi,offset AlphagradeArr
 00000355  03 F8		add edi,eax
 00000357  B9 0000000B		mov ecx,lengthof alphagradeArr
 0000035C  2B C8		sub ecx,eax
 0000035E  83 E9 02		sub ecx,2
 00000361  8B F7		mov esi,edi
 00000363  83 C6 01		add esi,1
 00000366  F3/ A4		rep movsb

				ret
 00000368  C9		   *	    leave  
 00000369  C2 0008	   *	    ret    00008h
 0000036C			DeleteStudent endp

 0000036C			DisStudentData proc,s_id:dword,s_name:ptr byte,s_grade:ptr dword
					
 0000036C  55		   *	    push   ebp
 0000036D  8B EC	   *	    mov    ebp, esp
					ret
 0000036F  C9		   *	    leave  
 00000370  C2 000C	   *	    ret    0000Ch
 00000373			DisStudentData endp
source.asm(350) : warning A6004:procedure argument or local not referenced : s_id
source.asm(350) : warning A6004:procedure argument or local not referenced : s_name
source.asm(350) : warning A6004:procedure argument or local not referenced : s_grade

 00000373			GenerateReport proc,f_name:ptr byte,sortby:byte

 00000373  55		   *	    push   ebp
 00000374  8B EC	   *	    mov    ebp, esp
					ret
 00000376  C9		   *	    leave  
 00000377  C2 0008	   *	    ret    00008h
 0000037A			GenerateReport endp
source.asm(355) : warning A6004:procedure argument or local not referenced : f_name
source.asm(355) : warning A6004:procedure argument or local not referenced : sortby

 0000037A			SplitBuffer proc
					;//file example : "10,Ahmed,100,A,", 13, 10, "20,Zaki, 70,C,", 13, 10, 0
 0000294A				.data
 0000294A 00000000			startF dword ? ;// start of field which is needed to be copied
 0000294E 00000000			endF dword ? ;// end of field which is needed to be copied
 00002952 00000000			idS dword ?
 00002956 00000000			namS dword ?
 0000295A 00000000			gradeS dword ?
 0000295E 00000000			alphaGradeS dword ?
 0000037A				.code
 0000037A  60				pushad
 0000037B  BF 00000004 R		mov edi, offset buffer
 00000380  C7 05 00002952 R		mov idS, offset idArr
	   0000280A R
 0000038A  C7 05 00002956 R		mov namS, offset nameArr
	   00002833 R
 00000394  C7 05 0000295A R		mov gradeS, offset gradeArr
	   000028FC R
 0000039E  C7 05 0000295E R		mov alphaGradeS, offset alphaGradeArr
	   0000291B R
 000003A8  B0 2C			mov al, ','
 000003AA				outer :;//loop until the file end with 0
 000003AA  B9 00000004			mov ecx, 4
 000003AF				inner:;//loop on fieldss
 000003AF  51				push ecx
 000003B0  B9 00001401			mov ecx, lengthof buffer
 000003B5  89 3D 0000294A R		mov startF, edi
 000003BB  F2/ AE			repne scasb;// move edi to the offset that have (,)
 000003BD  89 3D 0000294E R		mov endF, edi
 000003C3  FF 0D 0000294E R		dec endF
 000003C9  59				pop ecx
 000003CA  8B 1D 0000294E R		mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 000003D0  2B 1D 0000294A R		sub ebx, startF
 000003D6  57				push edi
					;// fill arrays with data between startF and endF
 000003D7  83 F9 03			cmp dword ptr ecx, 3
 000003DA  74 19			je N
 000003DC  83 F9 02			cmp dword ptr ecx, 2
 000003DF  74 23			je G
 000003E1  83 F9 01			cmp dword ptr ecx, 1
 000003E4  74 2D			je A
 000003E6  8B 3D 00002952 R		mov edi, idS
 000003EC  83 05 00002952 R		add idS, 4
	   04
 000003F3  EB 2B			jmp next
 000003F5				N :
 000003F5  8B 3D 00002956 R		mov edi, namS
 000003FB  83 05 00002956 R		add namS, 20
	   14
 00000402  EB 1C			jmp next
 00000404				G :
 00000404  8B 3D 0000295A R		mov edi, gradeS
 0000040A  83 05 0000295A R		add gradeS, 3
	   03
 00000411  EB 0D			jmp next
 00000413				A :
 00000413  8B 3D 0000295E R		mov edi, alphaGradeS
 00000419  83 05 0000295E R		add alphaGradeS, 1
	   01
 00000420				next :
 00000420  51				push ecx
 00000421  8B CB			mov ecx, ebx
 00000423  8B 35 0000294A R		mov esi, startF
 00000429  F3/ A4			rep movsb
 0000042B  59				pop ecx
 0000042C  5F				pop edi
 0000042D  E2 80			Loop inner
 0000042F  83 C7 02			add edi, 2
 00000432  80 3F 00			cmp byte ptr[edi], 0
 00000435  0F 85 FFFFFF6F		jne outer
 0000043B  61				popad
 0000043C  C3				ret
 0000043D			SplitBuffer endp

 0000043D			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 0000043D  55		   *	    push   ebp
 0000043E  8B EC	   *	    mov    ebp, esp
 00000440  B8 00000001			mov eax, 1;//Return true to caller. 
					ret 
 00000445  C9		   *	    leave  
 00000446  C2 000C	   *	    ret    0000Ch
 00000449			DllMain ENDP
source.asm(426) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(426) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(426) : warning A6004:procedure argument or local not referenced : lpReserved
=======
 000001C5  C9		   *	    leave  
 000001C6  C2 0010	   *	    ret    00010h
 000001C9			UpdateGrade endp

 000001C9			DeleteStudent proc,s_id:ptr byte, s_id_size:dword
 000001C9  55		   *	    push   ebp
 000001CA  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id, s_id_size
 000001CC  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 000001CF  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000001D2  E8 FFFFFF44	   *	    call   getIdIndex

				;// moving ids back
 000001D7  A3 00002926 R	mov temp2,eax
 000001DC  BB 00000004		mov ebx,4
 000001E1  F7 E3		mul ebx
 000001E3  BF 0000280A R	mov edi,offset idArr
 000001E8  03 F8		add edi,eax
 000001EA  B9 00000029		mov ecx,lengthof idArr
 000001EF  2B C8		sub ecx,eax
 000001F1  83 E9 05		sub ecx,5
 000001F4  8B F7		mov esi,edi
 000001F6  83 C6 04		add esi,4
 000001F9  F3/ A4		rep movsb
				;;// moving name back
 000001FB  A1 00002926 R	mov eax,temp2
 00000200  BB 00000014		mov ebx,20
 00000205  F7 E3		mul ebx
 00000207  BF 00002833 R	mov edi,offset nameArr
 0000020C  03 F8		add edi,eax
 0000020E  B9 000000C9		mov ecx,lengthof nameArr
 00000213  2B C8		sub ecx,eax
 00000215  83 E9 15		sub ecx,21
 00000218  8B F7		mov esi,edi
 0000021A  83 C6 14		add esi,20
 0000021D  F3/ A4		rep movsb
				;// moving grades back
 0000021F  A1 00002926 R	mov eax,temp2
 00000224  BB 00000003		mov ebx,3
 00000229  F7 E3		mul ebx
 0000022B  BF 000028FC R	mov edi,offset gradeArr
 00000230  03 F8		add edi,eax
 00000232  B9 0000001F		mov ecx,lengthof gradeArr
 00000237  2B C8		sub ecx,eax
 00000239  83 E9 04		sub ecx,4
 0000023C  8B F7		mov esi,edi
 0000023E  83 C6 03		add esi,3
 00000241  F3/ A4		rep movsb
				;// moving alphaGrade
 00000243  A1 00002926 R	mov eax,temp2
 00000248  BB 00000003		mov ebx,3
 0000024D  F7 E3		mul ebx
 0000024F  BF 0000291B R	mov edi,offset AlphagradeArr
 00000254  03 F8		add edi,eax
 00000256  B9 0000000B		mov ecx,lengthof alphagradeArr
 0000025B  2B C8		sub ecx,eax
 0000025D  83 E9 02		sub ecx,2
 00000260  8B F7		mov esi,edi
 00000262  83 C6 01		add esi,1
 00000265  F3/ A4		rep movsb

				ret
 00000267  C9		   *	    leave  
 00000268  C2 0008	   *	    ret    00008h
 0000026B			DeleteStudent endp

 0000026B			DisStudentData proc,s_id:dword,s_name:ptr byte,s_grade:ptr dword
					
 0000026B  55		   *	    push   ebp
 0000026C  8B EC	   *	    mov    ebp, esp
					ret
 0000026E  C9		   *	    leave  
 0000026F  C2 000C	   *	    ret    0000Ch
 00000272			DisStudentData endp
source.asm(261) : warning A6004:procedure argument or local not referenced : s_id
source.asm(261) : warning A6004:procedure argument or local not referenced : s_name
source.asm(261) : warning A6004:procedure argument or local not referenced : s_grade

 00000272			GenerateReport proc,f_name:ptr byte,sortby:byte

 00000272  55		   *	    push   ebp
 00000273  8B EC	   *	    mov    ebp, esp
					ret
 00000275  C9		   *	    leave  
 00000276  C2 0008	   *	    ret    00008h
 00000279			GenerateReport endp
source.asm(266) : warning A6004:procedure argument or local not referenced : f_name
source.asm(266) : warning A6004:procedure argument or local not referenced : sortby

 00000279			SplitBuffer proc
					;//file example : "10,Ahmed,100,", 13, 10, "20,Zaki,300,", 13, 10, "30,Hassan,600,", 13, 10, 0
 0000293E				.data
 0000293E 00000000			startF dword ? ;// start of field which is needed to be copied
 00002942 00000000			endF dword ? ;// end of field which is needed to be copied
 00002946 00000000			idS dword ? ;// offset of last id written in (id) array
 0000294A 00000000			namS dword ? ;// offset of last name written in (nam) array
 0000294E 00000000			gradeS dword ? ;// offset of last grade written in (grade) array
 00002952 00000000			alphaGradeS dword ? ;// offset of last alpha grade written in (alphaGrade) array
 00000279				.code
 00000279  60				pushad
 0000027A  BF 00000004 R		mov edi, offset buffer
 0000027F  C7 05 00002946 R		mov idS, offset idArr
	   0000280A R
 00000289  C7 05 0000294A R		mov namS, offset nameArr
	   00002833 R
 00000293  C7 05 0000294E R		mov gradeS, offset gradeArr
	   000028FC R
 0000029D  C7 05 00002952 R		mov alphaGradeS, offset alphaGradeArr
	   0000291B R
 000002A7  B0 2C			mov al, ','
 000002A9				outer :;//loop until the file end with 0
 000002A9  B9 00000004			mov ecx, 4;//3 for id and name and grade
 000002AE				inner:
 000002AE  51				push ecx
 000002AF  B9 00001401			mov ecx, lengthof buffer
 000002B4  89 3D 0000293E R		mov startF, edi
 000002BA  F2/ AE			repne scasb;// move edi to the offset that have (,)
 000002BC  89 3D 00002942 R		mov endF, edi
 000002C2  FF 0D 00002942 R		dec endF
 000002C8  59				pop ecx
 000002C9  8B 1D 00002942 R		mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 000002CF  2B 1D 0000293E R		sub ebx, startF
 000002D5  57				push edi
					;// fill arrays with data between startF and endF
 000002D6  83 F9 03			cmp dword ptr ecx, 3
 000002D9  74 19			je N
 000002DB  83 F9 02			cmp dword ptr ecx, 2
 000002DE  74 23			je G
 000002E0  83 F9 01			cmp dword ptr ecx, 1
 000002E3  74 2D			je A
 000002E5  8B 3D 00002946 R		mov edi, idS
 000002EB  83 05 00002946 R		add idS, 4
	   04
 000002F2  EB 2B			jmp next
 000002F4				N :
 000002F4  8B 3D 0000294A R		mov edi, namS
 000002FA  83 05 0000294A R		add namS, 20
	   14
 00000301  EB 1C			jmp next
 00000303				G :
 00000303  8B 3D 0000294E R		mov edi, gradeS
 00000309  83 05 0000294E R		add gradeS, 3
	   03
 00000310  EB 0D			jmp next
 00000312				A :
 00000312  8B 3D 00002952 R		mov edi, alphaGradeS
 00000318  83 05 00002952 R		add alphaGradeS, 1
	   01
 0000031F				next :
 0000031F  51				push ecx
 00000320  8B CB			mov ecx, ebx
 00000322  8B 35 0000293E R		mov esi, startF
 00000328  F3/ A4			rep movsb
 0000032A  59				pop ecx
 0000032B  5F				pop edi
 0000032C  E2 80			Loop inner
 0000032E  83 C7 02			add edi, 2
 00000331  80 3F 00			cmp byte ptr[edi], 0
 00000334  0F 85 FFFFFF6F		jne outer
 0000033A  61				popad
 0000033B  C3				ret
 0000033C			SplitBuffer endp

 0000033C			AlphaGrade proc grade: ptr byte
 0000033C  55		   *	    push   ebp
 0000033D  8B EC	   *	    mov    ebp, esp
 00002956				.data
 00002956 20 36 30 00			gradeF byte " 60", 0
 0000295A 20 37 30 00			gradeD byte " 70", 0
 0000295E 20 38 30 00			gradeC byte " 80", 0
 00002962 20 39 30 00			gradeB byte " 90", 0
 0000033F				.code
 0000033F  8B 75 08			mov esi,  grade
 00000342  BF 00002956 R		mov edi, offset gradeF
 00000347  B9 00000003			mov ecx, 3
 0000034C  F3/ A6			repe cmpsb
 0000034E  72 43			jb FG

 00000350  8B 75 08			mov esi,  grade
 00000353  BF 0000295A R		mov edi, offset gradeD
 00000358  B9 00000003			mov ecx, 3
 0000035D  F3/ A6			repe cmpsb
 0000035F  72 2E			jb DG

 00000361  8B 75 08			mov esi,  grade
 00000364  BF 0000295E R		mov edi, offset gradeC
 00000369  B9 00000003			mov ecx, 3
 0000036E  F3/ A6			repe cmpsb
 00000370  72 19			jb CG

 00000372  8B 75 08			mov esi,  grade
 00000375  BF 00002962 R		mov edi, offset gradeB
 0000037A  B9 00000003			mov ecx, 3
 0000037F  F3/ A6			repe cmpsb
 00000381  72 04			jb BG

 00000383				AG :
 00000383  B0 41			mov al, 'A'
 00000385  EB 0E			jmp done
 00000387				BG :
 00000387  B0 42			mov al, 'B'
 00000389  EB 0A			jmp done
 0000038B				CG :
 0000038B  B0 43			mov al, 'C'
 0000038D  EB 06			jmp done
 0000038F				DG :
 0000038F  B0 44			mov al, 'D'
 00000391  EB 02			jmp done
 00000393				FG :
 00000393  B0 46			mov al, 'F'
 00000395				done :
					ret
 00000395  C9		   *	    leave  
 00000396  C2 0004	   *	    ret    00004h
 00000399			AlphaGrade endp
 00000399			swap Proc sizes:dword,ptr1:ptr byte 
 00000399  55		   *	    push   ebp
 0000039A  8B EC	   *	    mov    ebp, esp
 0000039C  8B 75 0C		mov esi,ptr1
 0000039F  BF 0000292A R	mov edi,offset temp1
 000003A4  8B 4D 08		mov ecx,sizes
 000003A7  F3/ A4		rep movsb 
 000003A9  8B 75 0C		mov esi,ptr1
 000003AC  03 75 08		add esi,sizes
 000003AF  8B 7D 0C		mov edi,ptr1
 000003B2  8B 4D 08		mov ecx,sizes
 000003B5  F3/ A4		rep movsb 
 000003B7  8B 7D 0C		mov edi,ptr1
 000003BA  03 7D 08		add edi,sizes
 000003BD  BE 0000292A R	mov esi,offset temp1
 000003C2  8B 4D 08		mov ecx,sizes
 000003C5  F3/ A4		rep movsb
				ret
 000003C7  C9		   *	    leave  
 000003C8  C2 0008	   *	    ret    00008h
 000003CB			swap endP

 000003CB			BubbleSort PROC USES eax ecx esi ebx edx edi,
				Count:DWORD ; array size
 000003CB  55		   *	    push   ebp
 000003CC  8B EC	   *	    mov    ebp, esp
 000003CE  50		   *	    push   eax
 000003CF  51		   *	    push   ecx
 000003D0  56		   *	    push   esi
 000003D1  53		   *	    push   ebx
 000003D2  52		   *	    push   edx
 000003D3  57		   *	    push   edi
 000003D4  8B 4D 08		mov ecx,Count
 000003D7  49			dec ecx; decrement count by 1
 000003D8  51			L1: push ecx ; save outer loop count
 000003D9  BE 0000280A R	mov esi,offset idArr ; point to first value
 000003DE  BF 00002833 R	mov edi,offset nameArr
 000003E3  BB 000028FC R	mov ebx,offset gradeArr
 000003E8  BA 0000291B R	mov edx,offset alphaGradeArr
 000003ED  8B 06		L2: mov eax,[esi] ; get array value
 000003EF  39 46 04		cmp [esi+4],eax ; compare a pair of values
 000003F2  7F 2D		jg L3 ; if [ESI] <= [ESI+4], no exchange
 000003F4  87 46 04		xchg eax,[esi+4] ; exchange the pair
 000003F7  89 06		mov [esi],eax
 000003F9  60			pushad
				invoke swap,4,esi
 000003FA  56		   *	    push   esi
 000003FB  6A 04	   *	    push   +000000004h
 000003FD  E8 FFFFFF97	   *	    call   swap
 00000402  61			popad
 00000403  60			pushad
				invoke swap,20,edi
 00000404  57		   *	    push   edi
 00000405  6A 14	   *	    push   +000000014h
 00000407  E8 FFFFFF8D	   *	    call   swap
 0000040C  61			popad
 0000040D  60			pushad
				invoke swap,3,ebx
 0000040E  53		   *	    push   ebx
 0000040F  6A 03	   *	    push   +000000003h
 00000411  E8 FFFFFF83	   *	    call   swap
 00000416  61			popad
 00000417  60			pushad
				invoke swap,1,edx
 00000418  52		   *	    push   edx
 00000419  6A 01	   *	    push   +000000001h
 0000041B  E8 FFFFFF79	   *	    call   swap
 00000420  61			popad

 00000421  83 C6 04		L3: add esi,4 ; move both pointers forward
 00000424  83 C7 14		add edi,20 ; move both pointers forward
 00000427  83 C3 03		add ebx,3 ; move both pointers forward
 0000042A  83 C2 01		add edx,1 ; move both pointers forward

 0000042D  E2 BE		loop L2 ; inner loop
 0000042F  59			pop ecx ; retrieve outer loop count
 00000430  E2 A6		loop L1 ; else repeat outer loop
 00000432			L4: ret
 00000432  5F		   *	    pop    edi
 00000433  5A		   *	    pop    edx
 00000434  5B		   *	    pop    ebx
 00000435  5E		   *	    pop    esi
 00000436  59		   *	    pop    ecx
 00000437  58		   *	    pop    eax
 00000438  C9		   *	    leave  
 00000439  C2 0004	   *	    ret    00004h
 0000043C			BubbleSort ENDP


 0000043C			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 0000043C  55		   *	    push   ebp
 0000043D  8B EC	   *	    mov    ebp, esp
 0000043F  B8 00000001			mov eax, 1;//Return true to caller. 
					ret 
 00000444  C9		   *	    leave  
 00000445  C2 000C	   *	    ret    0000Ch
 00000448			DllMain ENDP
source.asm(442) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(442) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(442) : warning A6004:procedure argument or local not referenced : lpReserved
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6


				END DllMain

<<<<<<< HEAD
Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/21/17 22:27:35
=======
Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/20/17 06:13:40
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
<<<<<<< HEAD
_DATA  . . . . . . . . . . . . .	32 Bit	 00002962 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000449 Para	  Public  'CODE'	
=======
_DATA  . . . . . . . . . . . . .	32 Bit	 00002966 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000448 Para	  Public  'CODE'	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

<<<<<<< HEAD
AlphaGrade . . . . . . . . . . .	P Near	 00000224 _TEXT	Length= 00000063 Public STDCALL
  grade  . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 0000026E _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 00000272 _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 00000276 _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 0000027A _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 0000027E _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000280 _TEXT	
=======
AlphaGrade . . . . . . . . . . .	P Near	 0000033C _TEXT	Length= 0000005D Public STDCALL
  grade  . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 00000383 _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 00000387 _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 0000038B _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 0000038F _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 00000393 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000395 _TEXT	
BubbleSort . . . . . . . . . . .	P Near	 000003CB _TEXT	Length= 00000071 Public STDCALL
  Count  . . . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 000003D8 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000003ED _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000421 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000432 _TEXT	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
<<<<<<< HEAD
DeleteStudent  . . . . . . . . .	P Near	 000002CA _TEXT	Length= 000000A2 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
DisStudentData . . . . . . . . .	P Near	 0000036C _TEXT	Length= 00000007 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000010
DllMain  . . . . . . . . . . . .	P Near	 0000043D _TEXT	Length= 0000000C Public STDCALL
=======
DeleteStudent  . . . . . . . . .	P Near	 000001C9 _TEXT	Length= 000000A2 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
DisStudentData . . . . . . . . .	P Near	 0000026B _TEXT	Length= 00000007 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000010
DllMain  . . . . . . . . . . . .	P Near	 0000043C _TEXT	Length= 0000000C Public STDCALL
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
  hInstance  . . . . . . . . . .	DWord	 bp + 00000008
  fdwReason  . . . . . . . . . .	DWord	 bp + 0000000C
  lpReserved . . . . . . . . . .	DWord	 bp + 00000010
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnrollStudent  . . . . . . . . .	P Near	 000000C1 _TEXT	Length= 0000005A Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  id_size  . . . . . . . . . . .	DWord	 bp + 00000010
  name_size  . . . . . . . . . .	DWord	 bp + 00000014
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
<<<<<<< HEAD
GenerateReport . . . . . . . . .	P Near	 00000373 _TEXT	Length= 00000007 Public STDCALL
=======
GenerateReport . . . . . . . . .	P Near	 00000272 _TEXT	Length= 00000007 Public STDCALL
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
  f_name . . . . . . . . . . . .	DWord	 bp + 00000008
  sortby . . . . . . . . . . . .	Byte	 bp + 0000000C
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenDatabase . . . . . . . . . .	P Near	 00000021 _TEXT	Length= 00000052 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  kye  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 00000064 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Open_Createfile  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveDatabase . . . . . . . . . .	P Near	 00000073 _TEXT	Length= 0000004E Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  kye  . . . . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
<<<<<<< HEAD
SplitBuffer  . . . . . . . . . .	P Near	 0000037A _TEXT	Length= 000000C3 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000003AA _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000003AF _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 000003F5 _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 00000404 _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 00000413 _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000420 _TEXT	
=======
SplitBuffer  . . . . . . . . . .	P Near	 00000279 _TEXT	Length= 000000C3 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 000002A9 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 000002AE _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 000002F4 _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 00000303 _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 00000312 _TEXT	
  next . . . . . . . . . . . . .	L Near	 0000031F _TEXT	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
<<<<<<< HEAD
UpdateGrade  . . . . . . . . . .	P Near	 00000287 _TEXT	Length= 00000043 Public STDCALL
=======
UpdateGrade  . . . . . . . . . .	P Near	 0000019C _TEXT	Length= 0000002D Public STDCALL
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_grade  . . . . . . . . . . .	DWord	 bp + 0000000C
  s_id_size  . . . . . . . . . .	DWord	 bp + 00000010
  s_grade_size . . . . . . . . .	DWord	 bp + 00000014
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fillBuffer . . . . . . . . . . .	P Near	 00000152 _TEXT	Length= 0000004A Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000015C _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000016C _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000181 _TEXT	
getIdIndex . . . . . . . . . . .	P Near	 0000011B _TEXT	Length= 00000037 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  Outer  . . . . . . . . . . . .	L Near	 00000128 _TEXT	
  Inner  . . . . . . . . . . . .	L Near	 00000130 _TEXT	
  fail . . . . . . . . . . . . .	L Near	 0000013C _TEXT	
  found  . . . . . . . . . . . .	L Near	 0000014C _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000014E _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
swap . . . . . . . . . . . . . .	P Near	 00000399 _TEXT	Length= 00000032 Public STDCALL
  sizes  . . . . . . . . . . . .	DWord	 bp + 00000008
  ptr1 . . . . . . . . . . . . .	DWord	 bp + 0000000C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFSIZE  . . . . . . . . . . . .	Number	 00001400h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
alphaGradeArr  . . . . . . . . .	Byte	 0000291B _DATA	
<<<<<<< HEAD
alphaGradePtr  . . . . . . . . .	DWord	 00002936 _DATA	
alphaGradeS  . . . . . . . . . .	DWord	 0000295E _DATA	
=======
alphaGradeS  . . . . . . . . . .	DWord	 00002952 _DATA	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000004 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
<<<<<<< HEAD
endF . . . . . . . . . . . . . .	DWord	 0000294E _DATA	
=======
endF . . . . . . . . . . . . . .	DWord	 00002942 _DATA	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00002806 _DATA	
filehandle . . . . . . . . . . .	DWord	 00000000 _DATA	
gradeArr . . . . . . . . . . . .	Byte	 000028FC _DATA	
<<<<<<< HEAD
gradeB . . . . . . . . . . . . .	Byte	 00002946 _DATA	
gradeC . . . . . . . . . . . . .	Byte	 00002942 _DATA	
gradeD . . . . . . . . . . . . .	Byte	 0000293E _DATA	
gradeF . . . . . . . . . . . . .	Byte	 0000293A _DATA	
gradePtr . . . . . . . . . . . .	DWord	 00002932 _DATA	
gradeS . . . . . . . . . . . . .	DWord	 0000295A _DATA	
=======
gradeB . . . . . . . . . . . . .	Byte	 00002962 _DATA	
gradeC . . . . . . . . . . . . .	Byte	 0000295E _DATA	
gradeD . . . . . . . . . . . . .	Byte	 0000295A _DATA	
gradeF . . . . . . . . . . . . .	Byte	 00002956 _DATA	
gradeS . . . . . . . . . . . . .	DWord	 0000294E _DATA	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
grade_size . . . . . . . . . . .	Number	 00000003h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idArr  . . . . . . . . . . . . .	Byte	 0000280A _DATA	
<<<<<<< HEAD
idPtr  . . . . . . . . . . . . .	DWord	 0000292A _DATA	
idS  . . . . . . . . . . . . . .	DWord	 00002952 _DATA	
=======
idS  . . . . . . . . . . . . . .	DWord	 00002946 _DATA	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
<<<<<<< HEAD
namS . . . . . . . . . . . . . .	DWord	 00002956 _DATA	
=======
namS . . . . . . . . . . . . . .	DWord	 0000294A _DATA	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
nameArr  . . . . . . . . . . . .	Byte	 00002833 _DATA	
new_buffer . . . . . . . . . . .	Byte	 00001405 _DATA	
record_size  . . . . . . . . . .	Number	 0000001Eh   
red  . . . . . . . . . . . . . .	Number	 00000004h   
<<<<<<< HEAD
startF . . . . . . . . . . . . .	DWord	 0000294A _DATA	
=======
startF . . . . . . . . . . . . .	DWord	 0000293E _DATA	
temp1  . . . . . . . . . . . . .	Byte	 0000292A _DATA	
>>>>>>> 03e30fd6b8e1523eb25395957d2aacb5fae5b5c6
temp2  . . . . . . . . . . . . .	DWord	 00002926 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   10 Warnings
	   0 Errors
