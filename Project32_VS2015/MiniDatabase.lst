Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/20/17 14:04:22
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 00001400				BUFSIZE = 5120;//5kb
 = 0000001E				record_size=30
 = 00000003				grade_size=3
 00000000 00000000			filehandle dword ?
 00000004  00001400 [			buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00001405  00001400 [			new_buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00002806 00000000			fileSize dword 0
 0000280A  00000028 [			idArr byte 40 dup('_'), 0
	    5F
	   ] 00
 00002833  000000C8 [			nameArr byte 200 dup('_'), 0
	    5F
	   ] 00
 000028FC  0000001E [			gradeArr byte 30 dup('_'), 0
	    5F
	   ] 00
 0000291B  0000000A [			alphaGradeArr byte 10 dup('_'), 0
	    5F
	   ] 00
 00002926 00000000			temp2 dword 0
 00000000			.code
 00000000			Open_Createfile proc,f_Name:ptr byte
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000003  6A 00	   *	    push   +000000000h
 00000005  68 00000080	   *	    push   +000000080h
 0000000A  6A 04	   *	    push   +000000004h
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  6A 00	   *	    push   +000000000h
 00000010  68 C0000000	   *	    push   +0C0000000h
 00000015  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000018  E8 00000000 E   *	    call   CreateFileA
					ret
 0000001D  C9		   *	    leave  
 0000001E  C2 0004	   *	    ret    00004h
 00000021			Open_Createfile endp

 00000021			encrypt_or_decrypt_buffer proc,kye:byte
 00000021  55		   *	    push   ebp
 00000022  8B EC	   *	    mov    ebp, esp
 00000024  BE 00000004 R		mov esi ,offset buffer
 00000029  8B FE			mov edi ,esi
 0000002B				L:
 0000002B  AC					lodsb
 0000002C  32 45 08				xor al,kye
 0000002F  AA					stosb
 00000030  E2 F9			loop L
					ret
 00000032  C9		   *	    leave  
 00000033  C2 0004	   *	    ret    00004h
 00000036			encrypt_or_decrypt_buffer endp

 00000036			OpenDatabase proc,f_Name:ptr byte,kye:byte
					;//open the file
 00000036  55		   *	    push   ebp
 00000037  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 00000039  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000003C  E8 FFFFFFBF	   *	    call   Open_Createfile
 00000041  A3 00000000 R		mov filehandle, eax
					;//load the file in buffer
					INVOKE ReadFile,
					filehandle,offset buffer,BUFSIZE,offset fileSize,NULL
 00000046  6A 00	   *	    push   +000000000h
 00000048  68 00002806 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 0000004D  68 00001400	   *	    push   +000001400h
 00000052  68 00000004 R   *	    push   dword  ptr OFFSET FLAT: buffer
 00000057  FF 35 00000000 R *	    push   filehandle
 0000005D  E8 00000000 E   *	    call   ReadFile
					;//decrypt data 
 00000062  8B 0D 00002806 R		mov ecx, fileSize
 00000068  83 F9 00			cmp ecx,0
 0000006B  74 05			je done
					;INVOKE encrypt_or_decrypt_buffer,kye
 0000006D  E8 0000028F			call SplitBuffer
 00000072				done:
					;//close the file
					INVOKE CloseHandle,filehandle
 00000072  FF 35 00000000 R *	    push   filehandle
 00000078  E8 00000000 E   *	    call   CloseHandle
					ret
 0000007D  C9		   *	    leave  
 0000007E  C2 0008	   *	    ret    00008h
 00000081			OpenDatabase endp
source.asm(51) : warning A6004:procedure argument or local not referenced : kye

 00000081			SaveDatabase proc,f_Name:ptr byte,kye:byte
 00000081  55		   *	    push   ebp
 00000082  8B EC	   *	    mov    ebp, esp
 00000084  E8 000000D0			call fillBuffer
					;//open the file
					INVOKE Open_Createfile,f_Name
 00000089  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000008C  E8 FFFFFF6F	   *	    call   Open_Createfile
 00000091  A3 00000000 R		mov filehandle,eax
					;//encrypt data 
 00000096  8B 0D 00002806 R		mov ecx, fileSize
					;INVOKE encrypt_or_decrypt_buffer,kye
					;//write data in the file
					INVOKE WriteFile,
					filehandle,offset buffer,fileSize,offset fileSize,null
 0000009C  6A 00	   *	    push   +000000000h
 0000009E  68 00002806 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 000000A3  FF 35 00002806 R *	    push   fileSize
 000000A9  68 00000004 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000000AE  FF 35 00000000 R *	    push   filehandle
 000000B4  E8 00000000 E   *	    call   WriteFile
					;//close the file
					INVOKE CloseHandle,filehandle
 000000B9  FF 35 00000000 R *	    push   filehandle
 000000BF  E8 00000000 E   *	    call   CloseHandle
					ret
 000000C4  C9		   *	    leave  
 000000C5  C2 0008	   *	    ret    00008h
 000000C8			SaveDatabase endp
source.asm(67) : warning A6004:procedure argument or local not referenced : kye

 000000C8			EnrollStudent proc,s_id:ptr byte,s_name:ptr byte, id_size: dword, name_size: dword
					;//set pointer to the end of the bufferr
 000000C8  55		   *	    push   ebp
 000000C9  8B EC	   *	    mov    ebp, esp
 000000CB  BF 00000004 R		mov edi , offset buffer 
 000000D0  03 3D 00002806 R		add edi , fileSize			
					;//store id
 000000D6  8B 75 08			mov esi , s_id
 000000D9  8B 4D 10			mov ecx ,id_size
 000000DC  F3/ A4			rep movsb
					;//write (,)
 000000DE  C6 07 2C			mov byte ptr [edi], ','
 000000E1  47				inc edi
					;//store name
 000000E2  8B 75 0C			mov esi , s_name
 000000E5  8B 4D 14			mov ecx , name_size
 000000E8  F3/ A4			rep movsb
					;//write (,)
 000000EA  C6 07 2C			mov byte ptr[edi], ','
 000000ED  47				inc edi
					;//save space to grade and Alpha_gread
 000000EE  83 C7 03			add edi,grade_size 
					;//write (,)
 000000F1  C6 07 2C			mov byte ptr[edi], ','
 000000F4  83 C7 02			add edi,2
					;//write (,)
 000000F7  C6 07 2C			mov byte ptr[edi], ','
 000000FA  47				inc edi
					;//carrying_return
 000000FB  C6 07 0D			mov byte ptr[edi],13		
 000000FE  47				inc edi
					;//line_feed
 000000FF  C6 07 0A			mov byte ptr[edi],10
 00000102  B8 00000000			mov eax, 0
 00000107  03 45 10			add eax, id_size
 0000010A  03 45 14			add eax, name_size
 0000010D  83 C0 03			add eax, grade_size
 00000110  83 C0 07			add eax, 7
 00000113  01 05 00002806 R		add fileSize, eax
					;//calling SplitBuffer to split the first buffer
 00000119  E8 000001E3			call SplitBuffer
					ret
 0000011E  C9		   *	    leave  
 0000011F  C2 0010	   *	    ret    00010h
 00000122			EnrollStudent endp

 00000122			getIdIndex proc, s_id:ptr byte, s_id_size : dword
					;// ids should be sortrd to work properly
 00000122  55		   *	    push   ebp
 00000123  8B EC	   *	    mov    ebp, esp
 00000125  BB 0000280A R		mov ebx, offset idArr
 0000012A  BA 00000000			mov edx, 0
 0000012F				Outer :
 0000012F  8B 75 08			mov esi, s_id
 00000132  8B FB			mov edi, ebx
 00000134  8B 4D 0C			mov ecx, s_id_size
 00000137				Inner :
 00000137  8A 07			mov al, [edi]
 00000139  38 06			cmp[esi], al
 0000013B  75 06			jne fail
 0000013D  46				inc esi
 0000013E  47				inc edi
 0000013F  E2 F6			Loop Inner
 00000141  EB 10			jmp found
 00000143				fail :
 00000143  83 C3 04			add ebx, 4
 00000146  42				inc edx
 00000147  80 3B 00			cmp byte ptr[ebx], 0
 0000014A  75 E3			jne Outer
 0000014C  B8 FFFFFFFF			mov eax, -1
 00000151  EB 02			jmp done
 00000153				found :
 00000153  8B C2			mov eax, edx
 00000155				done :
					ret
 00000155  C9		   *	    leave  
 00000156  C2 0008	   *	    ret    00008h
 00000159			getIdIndex endP

 00000159			fillBuffer proc
 0000292A				.data
 0000292A 0000280A R			idPtr dword offset idArr
 0000292E 00002833 R			namePtr dword offset nameArr
 00002932 000028FC R			gradePtr dword offset gradeArr
 00002936 0000291B R			alphaGradePtr dword offset alphaGradeArr
 00000159				.code
 00000159  C7 05 0000292A R		mov idPtr, offset idArr
	   0000280A R
 00000163  C7 05 0000292E R		mov namePtr, offset nameArr
	   00002833 R
 0000016D  C7 05 00002932 R		mov gradePtr, offset gradeArr
	   000028FC R
 00000177  C7 05 00002936 R		mov alphaGradePtr, offset alphaGradeArr
	   0000291B R
					;//clear the buffer
 00000181  B0 00			mov al, 0
 00000183  B9 00001400			mov ecx, BUFSIZE
 00000188  BF 00000004 R		mov edi, offset buffer
 0000018D  F3/ AA			rep stosb
 0000018F  BF 00000004 R		mov edi, offset buffer
 00000194				O :
					;//copy id
 00000194  8B 35 0000292A R		mov esi, idPtr
 0000019A  B9 00000004			mov ecx, 4
 0000019F				L1 :
 0000019F  80 3E 5F			cmp byte ptr[esi], '_'
 000001A2  74 0A			je N1
 000001A4  83 F9 00			cmp ecx, 0
 000001A7  74 05			je N1
 000001A9  49				dec ecx
 000001AA  A4				movsb
 000001AB  4A				dec edx
 000001AC  EB F1			jmp L1
 000001AE				N1 :
 000001AE  83 05 0000292A R		add idPtr, 4
	   04
					;//write (,)
 000001B5  C6 07 2C			mov byte ptr[edi], ','
 000001B8  47				inc edi
					;//copy name
 000001B9  8B 35 0000292E R		mov esi, namePtr
 000001BF  B9 00000014			mov ecx, 20
 000001C4				L2 :
 000001C4  80 3E 5F			cmp byte ptr[esi], '_'
 000001C7  74 0A			je N2
 000001C9  83 F9 00			cmp ecx, 0
 000001CC  74 05			je N2
 000001CE  49				dec ecx
 000001CF  A4				movsb
 000001D0  4A				dec edx
 000001D1  EB F1			jmp L2
 000001D3				N2 :
 000001D3  83 05 0000292E R		add namePtr, 20
	   14
					;//write (,)
 000001DA  C6 07 2C			mov byte ptr[edi], ','
 000001DD  47				inc edi
					;//copy Grade
 000001DE  8B 35 00002932 R		mov esi, gradePtr
 000001E4  B9 00000003			mov ecx, 3
 000001E9  F3/ A4			rep movsb
 000001EB  83 05 00002932 R		add gradePtr, 3
	   03
					;//write (,)
 000001F2  C6 07 2C			mov byte ptr[edi], ','
 000001F5  47				inc edi
					;//copy alphaGrade
 000001F6  8B 35 00002936 R		mov esi, alphaGradePtr
 000001FC  A4				movsb
 000001FD  FF 05 00002936 R		inc alphaGradePtr
					;//write (,)
 00000203  C6 07 2C			mov byte ptr[edi], ','
 00000206  47				inc edi
					;//add new line
 00000207  C6 07 0D			mov byte ptr[edi], 13
 0000020A  47				inc edi
 0000020B  C6 07 0A			mov byte ptr[edi], 10
 0000020E  47				inc edi
					;//repet to next record if there is any
 0000020F  8B 1D 0000292A R		mov ebx, idPtr
 00000215  80 3B 00			cmp byte ptr[ebx], 0
 00000218  74 09			je done
 0000021A  80 3B 5F			cmp byte ptr[ebx], '_'
 0000021D  0F 85 FFFFFF71		jne O
 00000223				done :
 00000223  C3				ret
 00000224			fillBuffer endp


 00000224			UpdateGrade proc, s_id:ptr byte, s_grade:ptr byte, s_id_size:dword, s_grade_size:dword
 00000224  55		   *	    push   ebp
 00000225  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id, s_id_size
 00000227  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 0000022A  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000022D  E8 FFFFFEF0	   *	    call   getIdIndex
 00000232  A3 00002926 R	mov temp2,eax
 00000237  BB 00000003		mov ebx,3
 0000023C  F7 E3		mul ebx
 0000023E  BF 000028FC R	mov edi,offset gradeArr
 00000243  03 F8		add edi,eax
 00000245  8B 4D 14		mov ecx,s_grade_size 
 00000248  8B 75 0C		mov esi,s_grade
 0000024B  F3/ A4		rep movsb

				ret
 0000024D  C9		   *	    leave  
 0000024E  C2 0010	   *	    ret    00010h
 00000251			UpdateGrade endp

 00000251			DeleteStudent proc,s_id:ptr byte, s_id_size:dword
 00000251  55		   *	    push   ebp
 00000252  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id, s_id_size
 00000254  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 00000257  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000025A  E8 FFFFFEC3	   *	    call   getIdIndex

				;// moving ids back
 0000025F  A3 00002926 R	mov temp2,eax
 00000264  BB 00000004		mov ebx,4
 00000269  F7 E3		mul ebx
 0000026B  BF 0000280A R	mov edi,offset idArr
 00000270  03 F8		add edi,eax
 00000272  B9 00000029		mov ecx,lengthof idArr
 00000277  2B C8		sub ecx,eax
 00000279  83 E9 05		sub ecx,5
 0000027C  8B F7		mov esi,edi
 0000027E  83 C6 04		add esi,4
 00000281  F3/ A4		rep movsb
				;;// moving name back
 00000283  A1 00002926 R	mov eax,temp2
 00000288  BB 00000014		mov ebx,20
 0000028D  F7 E3		mul ebx
 0000028F  BF 00002833 R	mov edi,offset nameArr
 00000294  03 F8		add edi,eax
 00000296  B9 000000C9		mov ecx,lengthof nameArr
 0000029B  2B C8		sub ecx,eax
 0000029D  83 E9 15		sub ecx,21
 000002A0  8B F7		mov esi,edi
 000002A2  83 C6 14		add esi,20
 000002A5  F3/ A4		rep movsb
				;// moving grades back
 000002A7  A1 00002926 R	mov eax,temp2
 000002AC  BB 00000003		mov ebx,3
 000002B1  F7 E3		mul ebx
 000002B3  BF 000028FC R	mov edi,offset gradeArr
 000002B8  03 F8		add edi,eax
 000002BA  B9 0000001F		mov ecx,lengthof gradeArr
 000002BF  2B C8		sub ecx,eax
 000002C1  83 E9 04		sub ecx,4
 000002C4  8B F7		mov esi,edi
 000002C6  83 C6 03		add esi,3
 000002C9  F3/ A4		rep movsb
				;// moving alphaGrade
 000002CB  A1 00002926 R	mov eax,temp2
 000002D0  BB 00000003		mov ebx,3
 000002D5  F7 E3		mul ebx
 000002D7  BF 0000291B R	mov edi,offset AlphagradeArr
 000002DC  03 F8		add edi,eax
 000002DE  B9 0000000B		mov ecx,lengthof alphagradeArr
 000002E3  2B C8		sub ecx,eax
 000002E5  83 E9 02		sub ecx,2
 000002E8  8B F7		mov esi,edi
 000002EA  83 C6 01		add esi,1
 000002ED  F3/ A4		rep movsb

				ret
 000002EF  C9		   *	    leave  
 000002F0  C2 0008	   *	    ret    00008h
 000002F3			DeleteStudent endp

 000002F3			DisStudentData proc,s_id:dword,s_name:ptr byte,s_grade:ptr dword
					
 000002F3  55		   *	    push   ebp
 000002F4  8B EC	   *	    mov    ebp, esp
					ret
 000002F6  C9		   *	    leave  
 000002F7  C2 000C	   *	    ret    0000Ch
 000002FA			DisStudentData endp
source.asm(295) : warning A6004:procedure argument or local not referenced : s_id
source.asm(295) : warning A6004:procedure argument or local not referenced : s_name
source.asm(295) : warning A6004:procedure argument or local not referenced : s_grade

 000002FA			GenerateReport proc,f_name:ptr byte,sortby:byte

 000002FA  55		   *	    push   ebp
 000002FB  8B EC	   *	    mov    ebp, esp
					ret
 000002FD  C9		   *	    leave  
 000002FE  C2 0008	   *	    ret    00008h
 00000301			GenerateReport endp
source.asm(300) : warning A6004:procedure argument or local not referenced : f_name
source.asm(300) : warning A6004:procedure argument or local not referenced : sortby

 00000301			SplitBuffer proc
					;//file example : "10,Ahmed,100,", 13, 10, "20,Zaki,300,", 13, 10, "30,Hassan,600,", 13, 10, 0
 0000293A				.data
 0000293A 00000000			startF dword ? ;// start of field which is needed to be copied
 0000293E 00000000			endF dword ? ;// end of field which is needed to be copied
 00002942 00000000			idS dword ? ;// offset of last id written in (id) array
 00002946 00000000			namS dword ? ;// offset of last name written in (nam) array
 0000294A 00000000			gradeS dword ? ;// offset of last grade written in (grade) array
 0000294E 00000000			alphaGradeS dword ? ;// offset of last alpha grade written in (alphaGrade) array
 00000301				.code
 00000301  60				pushad
 00000302  BF 00000004 R		mov edi, offset buffer
 00000307  C7 05 00002942 R		mov idS, offset idArr
	   0000280A R
 00000311  C7 05 00002946 R		mov namS, offset nameArr
	   00002833 R
 0000031B  C7 05 0000294A R		mov gradeS, offset gradeArr
	   000028FC R
 00000325  C7 05 0000294E R		mov alphaGradeS, offset alphaGradeArr
	   0000291B R
 0000032F  B0 2C			mov al, ','
 00000331				outer :;//loop until the file end with 0
 00000331  B9 00000004			mov ecx, 4;//3 for id and name and grade
 00000336				inner:
 00000336  51				push ecx
 00000337  B9 00001401			mov ecx, lengthof buffer
 0000033C  89 3D 0000293A R		mov startF, edi
 00000342  F2/ AE			repne scasb;// move edi to the offset that have (,)
 00000344  89 3D 0000293E R		mov endF, edi
 0000034A  FF 0D 0000293E R		dec endF
 00000350  59				pop ecx
 00000351  8B 1D 0000293E R		mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 00000357  2B 1D 0000293A R		sub ebx, startF
 0000035D  57				push edi
					;// fill arrays with data between startF and endF
 0000035E  83 F9 03			cmp dword ptr ecx, 3
 00000361  74 19			je N
 00000363  83 F9 02			cmp dword ptr ecx, 2
 00000366  74 23			je G
 00000368  83 F9 01			cmp dword ptr ecx, 1
 0000036B  74 2D			je A
 0000036D  8B 3D 00002942 R		mov edi, idS
 00000373  83 05 00002942 R		add idS, 4
	   04
 0000037A  EB 2B			jmp next
 0000037C				N :
 0000037C  8B 3D 00002946 R		mov edi, namS
 00000382  83 05 00002946 R		add namS, 20
	   14
 00000389  EB 1C			jmp next
 0000038B				G :
 0000038B  8B 3D 0000294A R		mov edi, gradeS
 00000391  83 05 0000294A R		add gradeS, 3
	   03
 00000398  EB 0D			jmp next
 0000039A				A :
 0000039A  8B 3D 0000294E R		mov edi, alphaGradeS
 000003A0  83 05 0000294E R		add alphaGradeS, 1
	   01
 000003A7				next :
 000003A7  51				push ecx
 000003A8  8B CB			mov ecx, ebx
 000003AA  8B 35 0000293A R		mov esi, startF
 000003B0  F3/ A4			rep movsb
 000003B2  59				pop ecx
 000003B3  5F				pop edi
 000003B4  E2 80			Loop inner
 000003B6  83 C7 02			add edi, 2
 000003B9  80 3F 00			cmp byte ptr[edi], 0
 000003BC  0F 85 FFFFFF6F		jne outer
 000003C2  61				popad
 000003C3  C3				ret
 000003C4			SplitBuffer endp

 000003C4			AlphaGrade proc grade: ptr byte
 000003C4  55		   *	    push   ebp
 000003C5  8B EC	   *	    mov    ebp, esp
 00002952				.data
 00002952 20 36 30 00			gradeF byte " 60", 0
 00002956 20 37 30 00			gradeD byte " 70", 0
 0000295A 20 38 30 00			gradeC byte " 80", 0
 0000295E 20 39 30 00			gradeB byte " 90", 0
 000003C7				.code
 000003C7  8B 75 08			mov esi,  grade
 000003CA  BF 00002952 R		mov edi, offset gradeF
 000003CF  B9 00000003			mov ecx, 3
 000003D4  F3/ A6			repe cmpsb
 000003D6  72 43			jb FG

 000003D8  8B 75 08			mov esi,  grade
 000003DB  BF 00002956 R		mov edi, offset gradeD
 000003E0  B9 00000003			mov ecx, 3
 000003E5  F3/ A6			repe cmpsb
 000003E7  72 2E			jb DG

 000003E9  8B 75 08			mov esi,  grade
 000003EC  BF 0000295A R		mov edi, offset gradeC
 000003F1  B9 00000003			mov ecx, 3
 000003F6  F3/ A6			repe cmpsb
 000003F8  72 19			jb CG

 000003FA  8B 75 08			mov esi,  grade
 000003FD  BF 0000295E R		mov edi, offset gradeB
 00000402  B9 00000003			mov ecx, 3
 00000407  F3/ A6			repe cmpsb
 00000409  72 04			jb BG

 0000040B				AG :
 0000040B  B0 41			mov al, 'A'
 0000040D  EB 0E			jmp done
 0000040F				BG :
 0000040F  B0 42			mov al, 'B'
 00000411  EB 0A			jmp done
 00000413				CG :
 00000413  B0 43			mov al, 'C'
 00000415  EB 06			jmp done
 00000417				DG :
 00000417  B0 44			mov al, 'D'
 00000419  EB 02			jmp done
 0000041B				FG :
 0000041B  B0 46			mov al, 'F'
 0000041D				done :
					ret
 0000041D  C9		   *	    leave  
 0000041E  C2 0004	   *	    ret    00004h
 00000421			AlphaGrade endp

 00000421			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 00000421  55		   *	    push   ebp
 00000422  8B EC	   *	    mov    ebp, esp
 00000424  B8 00000001			mov eax, 1;//Return true to caller. 
					ret 
 00000429  C9		   *	    leave  
 0000042A  C2 000C	   *	    ret    0000Ch
 0000042D			DllMain ENDP
source.asm(420) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(420) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(420) : warning A6004:procedure argument or local not referenced : lpReserved


				END DllMain

Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/20/17 14:04:22
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002962 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000042D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AlphaGrade . . . . . . . . . . .	P Near	 000003C4 _TEXT	Length= 0000005D Public STDCALL
  grade  . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 0000040B _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 0000040F _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 00000413 _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 00000417 _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 0000041B _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000041D _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeleteStudent  . . . . . . . . .	P Near	 00000251 _TEXT	Length= 000000A2 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
DisStudentData . . . . . . . . .	P Near	 000002F3 _TEXT	Length= 00000007 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000010
DllMain  . . . . . . . . . . . .	P Near	 00000421 _TEXT	Length= 0000000C Public STDCALL
  hInstance  . . . . . . . . . .	DWord	 bp + 00000008
  fdwReason  . . . . . . . . . .	DWord	 bp + 0000000C
  lpReserved . . . . . . . . . .	DWord	 bp + 00000010
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnrollStudent  . . . . . . . . .	P Near	 000000C8 _TEXT	Length= 0000005A Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  id_size  . . . . . . . . . . .	DWord	 bp + 00000010
  name_size  . . . . . . . . . .	DWord	 bp + 00000014
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateReport . . . . . . . . .	P Near	 000002FA _TEXT	Length= 00000007 Public STDCALL
  f_name . . . . . . . . . . . .	DWord	 bp + 00000008
  sortby . . . . . . . . . . . .	Byte	 bp + 0000000C
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenDatabase . . . . . . . . . .	P Near	 00000036 _TEXT	Length= 0000004B Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  kye  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 00000072 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Open_Createfile  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveDatabase . . . . . . . . . .	P Near	 00000081 _TEXT	Length= 00000047 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  kye  . . . . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SplitBuffer  . . . . . . . . . .	P Near	 00000301 _TEXT	Length= 000000C3 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 00000331 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 00000336 _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 0000037C _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 0000038B _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 0000039A _TEXT	
  next . . . . . . . . . . . . .	L Near	 000003A7 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGrade  . . . . . . . . . .	P Near	 00000224 _TEXT	Length= 0000002D Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_grade  . . . . . . . . . . .	DWord	 bp + 0000000C
  s_id_size  . . . . . . . . . .	DWord	 bp + 00000010
  s_grade_size . . . . . . . . .	DWord	 bp + 00000014
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
encrypt_or_decrypt_buffer  . . .	P Near	 00000021 _TEXT	Length= 00000015 Public STDCALL
  kye  . . . . . . . . . . . . .	Byte	 bp + 00000008
  L  . . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
fillBuffer . . . . . . . . . . .	P Near	 00000159 _TEXT	Length= 000000CB Public STDCALL
  O  . . . . . . . . . . . . . .	L Near	 00000194 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 0000019F _TEXT	
  N1 . . . . . . . . . . . . . .	L Near	 000001AE _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000001C4 _TEXT	
  N2 . . . . . . . . . . . . . .	L Near	 000001D3 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000223 _TEXT	
getIdIndex . . . . . . . . . . .	P Near	 00000122 _TEXT	Length= 00000037 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  Outer  . . . . . . . . . . . .	L Near	 0000012F _TEXT	
  Inner  . . . . . . . . . . . .	L Near	 00000137 _TEXT	
  fail . . . . . . . . . . . . .	L Near	 00000143 _TEXT	
  found  . . . . . . . . . . . .	L Near	 00000153 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000155 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFSIZE  . . . . . . . . . . . .	Number	 00001400h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
alphaGradeArr  . . . . . . . . .	Byte	 0000291B _DATA	
alphaGradePtr  . . . . . . . . .	DWord	 00002936 _DATA	
alphaGradeS  . . . . . . . . . .	DWord	 0000294E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000004 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endF . . . . . . . . . . . . . .	DWord	 0000293E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00002806 _DATA	
filehandle . . . . . . . . . . .	DWord	 00000000 _DATA	
gradeArr . . . . . . . . . . . .	Byte	 000028FC _DATA	
gradeB . . . . . . . . . . . . .	Byte	 0000295E _DATA	
gradeC . . . . . . . . . . . . .	Byte	 0000295A _DATA	
gradeD . . . . . . . . . . . . .	Byte	 00002956 _DATA	
gradeF . . . . . . . . . . . . .	Byte	 00002952 _DATA	
gradePtr . . . . . . . . . . . .	DWord	 00002932 _DATA	
gradeS . . . . . . . . . . . . .	DWord	 0000294A _DATA	
grade_size . . . . . . . . . . .	Number	 00000003h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idArr  . . . . . . . . . . . . .	Byte	 0000280A _DATA	
idPtr  . . . . . . . . . . . . .	DWord	 0000292A _DATA	
idS  . . . . . . . . . . . . . .	DWord	 00002942 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
namS . . . . . . . . . . . . . .	DWord	 00002946 _DATA	
nameArr  . . . . . . . . . . . .	Byte	 00002833 _DATA	
namePtr  . . . . . . . . . . . .	DWord	 0000292E _DATA	
new_buffer . . . . . . . . . . .	Byte	 00001405 _DATA	
record_size  . . . . . . . . . .	Number	 0000001Eh   
red  . . . . . . . . . . . . . .	Number	 00000004h   
startF . . . . . . . . . . . . .	DWord	 0000293A _DATA	
temp2  . . . . . . . . . . . . .	DWord	 00002926 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   10 Warnings
	   0 Errors
