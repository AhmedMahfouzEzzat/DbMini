Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/25/17 04:40:56
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 00001400				BUFSIZE = 5120;//5kb
 = 00000004				id_element_size = 4
 = 00000014				name_element_size = 20
 = 00000003				grade_element_size = 3
 = 00000032				max_student_count = 50

 00000000 72 65 70 6F 72		report_file byte "report.txt",0
	   74 2E 74 78 74
	   00
 0000000B 00000000			report_filehandle dword ?
 0000000F 00000000			filehandle dword ?
 00000013  00001400 [			buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00001414  00001400 [			report_buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00002815  00000032 [			idArr byte max_student_count dup(id_element_size dup('+')), 0
	    00000004 [
	     2B
	    ]
	   ] 00
 000028DE  00000032 [			nameArr byte max_student_count dup(name_element_size dup('+')), 0
	    00000014 [
	     2B
	    ]
	   ] 00
 00002CC7  00000032 [			gradeArr byte max_student_count dup(grade_element_size dup('+')), 0
	    00000003 [
	     2B
	    ]
	   ] 00
 00002D5E  00000032 [			alphaGradeArr byte max_student_count dup('+'), 0
	    2B
	   ] 00
 00002D91  00000004 [			id_temp byte id_element_size dup('+')
	    2B
	   ]
 00002D95 00000000			grade_index dword 0
 00002D99 2B 2B 2B 00			empty_grade byte "+++",0
 00002D9D 00000000			fileSize dword 0
 00002DA1 00000000			filesize_temp dword 0
 00002DA5 00000000			student_count dword 0
 00002DA9 00000000			id_index_temp dword 0
 00002DAD  00000014 [			temp1 byte 20 dup(' ')
	    20
	   ]
 00000000			.code

 00000000			Open_Createfile proc,f_Name:ptr byte
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000003  6A 00	   *	    push   +000000000h
 00000005  68 00000080	   *	    push   +000000080h
 0000000A  6A 04	   *	    push   +000000004h
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  6A 00	   *	    push   +000000000h
 00000010  68 C0000000	   *	    push   +0C0000000h
 00000015  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000018  E8 00000000 E   *	    call   CreateFileA
					ret
 0000001D  C9		   *	    leave  
 0000001E  C2 0004	   *	    ret    00004h
 00000021			Open_Createfile endp  

 00000021			encrypt_or_decrypt_buffer proc, key:byte
 00000021  55		   *	    push   ebp
 00000022  8B EC	   *	    mov    ebp, esp
 00000024  BE 00000013 R		mov esi ,offset buffer
 00000029  8B FE			mov edi ,esi
 0000002B				L:
 0000002B  AC					lodsb
 0000002C  32 45 08				xor al,key
 0000002F  AA					stosb
 00000030  E2 F9			loop L
					ret
 00000032  C9		   *	    leave  
 00000033  C2 0004	   *	    ret    00004h
 00000036			encrypt_or_decrypt_buffer endp  

 00000036			initialize proc USES eax ecx edi , dist:ptr byte , value:byte , dist_size: dword
 00000036  55		   *	    push   ebp
 00000037  8B EC	   *	    mov    ebp, esp
 00000039  50		   *	    push   eax
 0000003A  51		   *	    push   ecx
 0000003B  57		   *	    push   edi
 0000003C  FC				cld
 0000003D  8A 45 0C			mov al, value
 00000040  8B 4D 10			mov ecx, dist_size
 00000043  8B 7D 08			mov edi, dist
 00000046  F3/ AA			rep stosb
					ret
 00000048  5F		   *	    pop    edi
 00000049  59		   *	    pop    ecx
 0000004A  58		   *	    pop    eax
 0000004B  C9		   *	    leave  
 0000004C  C2 000C	   *	    ret    0000Ch
 0000004F			initialize endp   

 0000004F			SplitBuffer proc
					;//file example : "10,Ahmed,100,A," 13 10 "20,Zaki,,," 13 10 
 00002DC1				.data
 00002DC1 00000000			startF dword ? ;// start of field which is needed to be copied
 00002DC5 00000000			endF dword ? ;// end of field which is needed to be copied
 00002DC9 00000000			idS dword ?
 00002DCD 00000000			namS dword ?
 00002DD1 00000000			gradeS dword ?
 00002DD5 00000000			alphaGradeS dword ?
 0000004F				.code
 0000004F  60				pushad
 00000050  BF 00000013 R		mov edi, offset buffer
 00000055  C7 05 00002DC9 R		mov idS, offset idArr
	   00002815 R
 0000005F  C7 05 00002DCD R		mov namS, offset nameArr
	   000028DE R
 00000069  C7 05 00002DD1 R		mov gradeS, offset gradeArr
	   00002CC7 R
 00000073  C7 05 00002DD5 R		mov alphaGradeS, offset alphaGradeArr
	   00002D5E R
 0000007D  B0 2C			mov al, ','
 0000007F  8B 0D 00002D9D R		mov ecx, fileSize
 00000085  89 0D 00002DA1 R		mov filesize_temp,ecx
 0000008B				outer :  ;//loop until the file end 
 0000008B  B9 00000004				mov ecx, 4
 00000090					inner:  ;//loop on fields
 00000090  51						push ecx
 00000091  8B 0D 00002DA1 R				mov ecx, fileSize_temp
 00000097  89 3D 00002DC1 R				mov startF, edi
 0000009D  FC						cld
 0000009E  F2/ AE					repne scasb;// move edi to the offset that have (,)
 000000A0  89 3D 00002DC5 R				mov endF, edi
 000000A6  FF 0D 00002DC5 R				dec endf
 000000AC  59						pop ecx
 000000AD  8B 1D 00002DC5 R				mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 000000B3  2B 1D 00002DC1 R				sub ebx, startF
 000000B9  29 1D 00002DA1 R				sub filesize_temp,ebx
 000000BF  FF 0D 00002DA1 R				dec filesize_temp  ;//for delamter ','
 000000C5  57						push edi
							;// fill arrays with data between startF and endF
 000000C6  83 F9 03					cmp ecx, 3
 000000C9  74 24					je N
 000000CB  83 F9 02					cmp ecx, 2
 000000CE  74 34					je G
 000000D0  83 F9 01					cmp ecx, 1
 000000D3  74 49					je A
 000000D5						i:
 000000D5  8B 3D 00002DC9 R				mov edi, idS
 000000DB  83 C7 03					add edi, id_element_size-1
 000000DE  83 05 00002DC9 R				add idS, id_element_size
	   04
 000000E5  8B 35 00002DC5 R				mov esi, endf
 000000EB  4E						dec esi    ;//last byte in id
 000000EC  FD						std
 000000ED  EB 42					jmp next
 000000EF						N :
 000000EF  8B 3D 00002DCD R				mov edi, namS
 000000F5  83 05 00002DCD R				add namS, name_element_size
	   14
 000000FC  8B 35 00002DC1 R				mov esi, startf
 00000102  EB 2D					jmp next
 00000104						G :
 00000104  8B 3D 00002DD1 R				mov edi, gradeS
 0000010A  83 C7 02					add edi, grade_element_size-1
 0000010D  83 05 00002DD1 R				add gradeS, grade_element_size
	   03
 00000114  8B 35 00002DC5 R				mov esi, endf
 0000011A  4E						dec esi
 0000011B  FD						std
 0000011C  EB 13					jmp next
 0000011E						A :
 0000011E  8B 3D 00002DD5 R				mov edi, alphaGradeS
 00000124  83 05 00002DD5 R				add alphaGradeS, 1
	   01
 0000012B  8B 35 00002DC1 R				mov esi, startF
 00000131						next :
 00000131  83 FB 00					cmp ebx,0
 00000134  74 06					je done
 00000136  51						push ecx
 00000137  8B CB					mov ecx, ebx
 00000139  F3/ A4					rep movsb
 0000013B  59						pop ecx	
 0000013C						done:
 0000013C  5F						pop edi
							
 0000013D  49					dec ecx			;//
 0000013E  83 F9 00				cmp ecx,0		;//instade of short loop
 00000141  0F 85 FFFFFF49			jne inner		;//
 00000147  83 C7 02				add edi, 2
 0000014A  83 2D 00002DA1 R			sub filesize_temp,2 ;//for new line
	   02
 00000151  FF 05 00002DA5 R			inc student_count
 00000157  83 3D 00002DA1 R		cmp filesize_temp,0		
	   00
 0000015E  0F 87 FFFFFF27		ja outer		        
 00000164  61				popad
 00000165  C3				ret
 00000166			SplitBuffer endp

 00000166			OpenDatabase proc, f_Name:ptr byte, key:byte
					;//open the file
 00000166  55		   *	    push   ebp
 00000167  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 00000169  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000016C  E8 FFFFFE8F	   *	    call   Open_Createfile
 00000171  A3 0000000F R		mov filehandle, eax
					;//load the file in buffer
					INVOKE ReadFile,
					filehandle,offset buffer,BUFSIZE,offset fileSize,NULL
 00000176  6A 00	   *	    push   +000000000h
 00000178  68 00002D9D R   *	    push   dword  ptr OFFSET FLAT: fileSize
 0000017D  68 00001400	   *	    push   +000001400h
 00000182  68 00000013 R   *	    push   dword  ptr OFFSET FLAT: buffer
 00000187  FF 35 0000000F R *	    push   filehandle
 0000018D  E8 00000000 E   *	    call   ReadFile
					;//decrypt data 
 00000192  8B 0D 00002D9D R		mov ecx, fileSize
 00000198  83 F9 00			cmp ecx,0
 0000019B  74 05			je done
					;INVOKE encrypt_or_decrypt_buffer,key
					;// fill the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr"
 0000019D  E8 FFFFFEAD			call SplitBuffer  
 000001A2				done:
					;//close the file
					INVOKE CloseHandle,filehandle
 000001A2  FF 35 0000000F R *	    push   filehandle
 000001A8  E8 00000000 E   *	    call   CloseHandle
					ret
 000001AD  C9		   *	    leave  
 000001AE  C2 0008	   *	    ret    00008h
 000001B1			OpenDatabase endp  
source.asm(162) : warning A6004:procedure argument or local not referenced : key

 000001B1			fillBuffer proc
 00002DD9				.data
 00002DD9 00000000			idPtr dword ?
 00002DDD 00000000			namePtr dword ?
 00002DE1 00000000			gradePtr dword ?
 00002DE5 00000000			alphaGradePtr dword ?
 000001B1				.code
 000001B1  BF 00000013 R		mov edi,offset buffer
 000001B6  C7 05 00002DD9 R		mov idPtr, offset idArr
	   00002815 R
 000001C0  C7 05 00002DDD R		mov namePtr, offset nameArr
	   000028DE R
 000001CA  C7 05 00002DE1 R		mov gradePtr, offset gradeArr
	   00002CC7 R
 000001D4  C7 05 00002DE5 R		mov alphaGradePtr, offset alphaGradeArr 
	   00002D5E R
					;//clear the buffer
					invoke initialize , edi , 0 , fileSize
 000001DE  FF 35 00002D9D R *	    push   fileSize
 000001E4  6A 00	   *	    push   +000000000h
 000001E6  57		   *	    push   edi
 000001E7  E8 FFFFFE4A	   *	    call   initialize
 000001EC  8B 0D 00002DA5 R		mov ecx , student_count
 000001F2				OUTER :
 000001F2  51				push ecx
						;//copy id
 000001F3  8B 35 00002DD9 R			mov esi, idPtr
 000001F9  B9 00000004				mov ecx, id_element_size
 000001FE					L1 :
 000001FE  80 3E 2B				cmp byte ptr[esi], '+'
 00000201  74 05				je N1      ;//next byte
 00000203  8A 06					mov al,[esi]
 00000205  88 07					mov [edi],al
 00000207  47						inc edi
 00000208					N1 :	
 00000208  46						inc esi 
 00000209  E2 F3				loop L1
 0000020B  83 05 00002DD9 R			add idPtr, id_element_size
	   04
						;//write (,)
 00000212  C6 07 2C				mov byte ptr[edi], ','
 00000215  47					inc edi
						;//copy name
 00000216  8B 35 00002DDD R			mov esi, namePtr
 0000021C  B9 00000014				mov ecx, name_element_size
 00000221					L2 :
 00000221  80 3E 2B				cmp byte ptr[esi], '+'
 00000224  74 03				je N2    ;// break the loop
 00000226  A4						movsb
 00000227  E2 F8				loop L2
 00000229					N2 :
 00000229  83 05 00002DDD R			add namePtr, name_element_size
	   14
						;//write (,)
 00000230  C6 07 2C				mov byte ptr[edi], ','
 00000233  47					inc edi
						;//copy Grade
 00000234  8B 35 00002DE1 R			mov esi, gradePtr
 0000023A  B9 00000003				mov ecx, grade_element_size
 0000023F					L3 :
 0000023F  80 3E 2B				cmp byte ptr[esi], '+'
 00000242  74 05				je N3      ;//next byte
 00000244  8A 06					mov al,[esi]
 00000246  88 07					mov [edi],al
 00000248  47						inc edi
 00000249					N3 :	
 00000249  46						inc esi 
 0000024A  E2 F3				loop L3
 0000024C  83 05 00002DE1 R			add gradePtr, grade_element_size
	   03
						;//write (,)
 00000253  C6 07 2C				mov byte ptr[edi], ','
 00000256  47					inc edi
						;//copy alphaGrade
 00000257  8B 35 00002DE5 R			mov esi, alphaGradePtr
 0000025D  80 3E 2B				cmp byte ptr[esi], '+'
 00000260  74 01				je N4
 00000262  A4						movsb
 00000263					N4:
 00000263  FF 05 00002DE5 R			inc alphaGradePtr
						;//write (,)
 00000269  C6 07 2C				mov byte ptr[edi], ','
 0000026C  47					inc edi
						;//add new line
 0000026D  C6 07 0D				mov byte ptr[edi], 13
 00000270  47					inc edi
 00000271  C6 07 0A				mov byte ptr[edi], 10
 00000274  47					inc edi
 00000275  59				pop ecx
 00000276  49				dec ecx			;//
 00000277  83 F9 00			cmp ecx,0		;//instade of short loop
 0000027A  0F 85 FFFFFF72		jne OUTER		;//
 00000280  C3				ret
 00000281			fillBuffer endp

 00000281			SaveDatabase proc, f_Name:ptr byte, key:byte
					;//open the file
 00000281  55		   *	    push   ebp
 00000282  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 00000284  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000287  E8 FFFFFD74	   *	    call   Open_Createfile
 0000028C  A3 0000000F R		mov filehandle,eax
					;// load the 4 arrays "idArr,nameArr,gradeArr,alphaGradeArr" in buffer
 00000291  E8 FFFFFF1B			call fillBuffer
					;//encrypt data 
 00000296  8B 0D 00002D9D R		mov ecx, fileSize
					;INVOKE encrypt_or_decrypt_buffer, key
					;//write data in the file
					INVOKE WriteFile,
					filehandle,offset buffer,fileSize,offset fileSize,null
 0000029C  6A 00	   *	    push   +000000000h
 0000029E  68 00002D9D R   *	    push   dword  ptr OFFSET FLAT: fileSize
 000002A3  FF 35 00002D9D R *	    push   fileSize
 000002A9  68 00000013 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000002AE  FF 35 0000000F R *	    push   filehandle
 000002B4  E8 00000000 E   *	    call   WriteFile
					;//close the file
					INVOKE CloseHandle,filehandle
 000002B9  FF 35 0000000F R *	    push   filehandle
 000002BF  E8 00000000 E   *	    call   CloseHandle
					ret
 000002C4  C9		   *	    leave  
 000002C5  C2 0008	   *	    ret    00008h
 000002C8			SaveDatabase endp  
source.asm(263) : warning A6004:procedure argument or local not referenced : key

 000002C8			EnrollStudent proc,s_id:ptr byte,s_name:ptr byte, id_size: dword, name_size: dword		
					;//store id
 000002C8  55		   *	    push   ebp
 000002C9  8B EC	   *	    mov    ebp, esp
 000002CB  FD				std
 000002CC  BF 00002815 R		mov edi , offset idArr
 000002D1  BA 00000000			mov edx , 0
 000002D6  A1 00002DA5 R		mov eax , student_count
 000002DB  BB 00000004			mov ebx , id_element_size
 000002E0  F7 E3			mul ebx
 000002E2  03 F8			add edi , eax
 000002E4  83 C7 03			add edi , id_element_size-1
 000002E7  8B 75 08			mov esi , s_id
 000002EA  03 75 10			add esi , id_size 
 000002ED  4E				dec esi
 000002EE  8B 4D 10			mov ecx , id_size
 000002F1  F3/ A4			rep movsb
					;//store name
 000002F3  FC				cld
 000002F4  BF 000028DE R		mov edi , offset nameArr
 000002F9  BA 00000000			mov edx , 0
 000002FE  A1 00002DA5 R		mov eax , student_count
 00000303  BB 00000014			mov ebx , name_element_size
 00000308  F7 E3			mul ebx
 0000030A  03 F8			add edi , eax
 0000030C  8B 75 0C			mov esi , s_name
 0000030F  8B 4D 14			mov ecx , name_size
 00000312  F3/ A4			rep movsb
					;//increment file size
 00000314  8B 45 10			mov eax, id_size
 00000317  03 45 14			add eax, name_size
 0000031A  83 C0 06			add eax, 6 ;//for 4delemter ','and new line 
 0000031D  01 05 00002D9D R		add fileSize, eax
 00000323  FF 05 00002DA5 R		inc student_count
					ret
 00000329  C9		   *	    leave  
 0000032A  C2 0010	   *	    ret    00010h
 0000032D			EnrollStudent endp

 0000032D			getIdIndex proc USES edi esi ecx ebx , s_id:ptr byte, s_id_size : dword

 0000032D  55		   *	    push   ebp
 0000032E  8B EC	   *	    mov    ebp, esp
 00000330  57		   *	    push   edi
 00000331  56		   *	    push   esi
 00000332  51		   *	    push   ecx
 00000333  53		   *	    push   ebx
					invoke initialize ,offset id_temp ,'+',id_element_size
 00000334  6A 04	   *	    push   +000000004h
 00000336  6A 2B	   *	    push   +00000002Bh
 00000338  68 00002D91 R   *	    push   dword  ptr OFFSET FLAT: id_temp
 0000033D  E8 FFFFFCF4	   *	    call   initialize
 00000342  FD				std
 00000343  BF 00002D91 R		mov edi , offset id_temp
 00000348  83 C7 03			add edi , id_element_size-1
 0000034B  8B 75 08			mov esi , s_id
 0000034E  03 75 0C			add esi , s_id_size 
 00000351  4E				dec esi
 00000352  8B 4D 0C			mov ecx , s_id_size
 00000355  F3/ A4			rep movsb

 00000357  BB 00002815 R		mov ebx, offset idArr
 0000035C  B8 00000000			mov eax, 0
 00000361  FC				cld 
 00000362				check :
 00000362  3B 05 00002DA5 R		cmp eax , student_count
 00000368  74 16				je fail 
 0000036A  BE 00002D91 R			mov esi, offset id_temp 
 0000036F  8B FB				mov edi, ebx
 00000371  B9 00000004				mov ecx, id_element_size
 00000376  F3/ A6				repe cmpsb
 00000378  74 0B				je found  ;//break
 0000037A  83 C3 04				add ebx,id_element_size ;//next element
 0000037D  40					inc eax 
 0000037E  EB E2				jmp check
 00000380				fail :
 00000380  B8 FFFFFFFF				mov eax, -1
 00000385				found :
					ret
 00000385  5B		   *	    pop    ebx
 00000386  59		   *	    pop    ecx
 00000387  5E		   *	    pop    esi
 00000388  5F		   *	    pop    edi
 00000389  C9		   *	    leave  
 0000038A  C2 0008	   *	    ret    00008h
 0000038D			getIdIndex endp

 0000038D			AlphaGrade proc USES esi edi ecx , grade: ptr byte
 0000038D  55		   *	    push   ebp
 0000038E  8B EC	   *	    mov    ebp, esp
 00000390  56		   *	    push   esi
 00000391  57		   *	    push   edi
 00000392  51		   *	    push   ecx
 00002DE9				.data
 00002DE9 2B 36 30 00			gradeF byte "+60", 0
 00002DED 2B 37 30 00			gradeD byte "+70", 0
 00002DF1 2B 38 30 00			gradeC byte "+80", 0
 00002DF5 2B 39 30 00			gradeB byte "+90", 0
 00000393				.code
 00000393  FC				cld 
 00000394  8B 75 08			mov esi,  grade
 00000397  BF 00002DE9 R		mov edi, offset gradeF
 0000039C  B9 00000003			mov ecx, 3
 000003A1  F3/ A6			repe cmpsb
 000003A3  72 43			jb FG

 000003A5  8B 75 08			mov esi,  grade
 000003A8  BF 00002DED R		mov edi, offset gradeD
 000003AD  B9 00000003			mov ecx, 3
 000003B2  F3/ A6			repe cmpsb
 000003B4  72 2E			jb DG

 000003B6  8B 75 08			mov esi,  grade
 000003B9  BF 00002DF1 R		mov edi, offset gradeC
 000003BE  B9 00000003			mov ecx, 3
 000003C3  F3/ A6			repe cmpsb
 000003C5  72 19			jb CG

 000003C7  8B 75 08			mov esi,  grade
 000003CA  BF 00002DF5 R		mov edi, offset gradeB
 000003CF  B9 00000003			mov ecx, 3
 000003D4  F3/ A6			repe cmpsb
 000003D6  72 04			jb BG

 000003D8				AG :
 000003D8  B0 41			mov al, 'A'
 000003DA  EB 0E			jmp done
 000003DC				BG :
 000003DC  B0 42			mov al, 'B'
 000003DE  EB 0A			jmp done
 000003E0				CG :
 000003E0  B0 43			mov al, 'C'
 000003E2  EB 06			jmp done
 000003E4				DG :
 000003E4  B0 44			mov al, 'D'
 000003E6  EB 02			jmp done
 000003E8				FG :
 000003E8  B0 46			mov al, 'F'
 000003EA				done :
					ret
 000003EA  59		   *	    pop    ecx
 000003EB  5F		   *	    pop    edi
 000003EC  5E		   *	    pop    esi
 000003ED  C9		   *	    leave  
 000003EE  C2 0004	   *	    ret    00004h
 000003F1			AlphaGrade endp

 000003F1			DeleteStudent proc,s_id:ptr byte, s_id_size:dword
 000003F1  55		   *	    push   ebp
 000003F2  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 000003F4  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 000003F7  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000003FA  E8 FFFFFF2E	   *	    call   getIdIndex
 000003FF  FC				cld
					;// moving ids back
 00000400  A3 00002DA9 R		mov id_index_temp , eax
 00000405  BB 00000004			mov ebx , id_element_size
 0000040A  F7 E3			mul ebx
 0000040C  BF 00002815 R		mov edi,offset idArr
 00000411  03 F8			add edi,eax
 00000413  57				push edi
 00000414  50				push eax
 00000415  B9 00000004			mov ecx, id_element_size
 0000041A  B0 2B			mov al,'+'
 0000041C  F3/ AE			repe scasb
 0000041E  29 0D 00002D9D R		sub fileSize,ecx
 00000424  83 2D 00002D9D R		sub fileSize,2
	   02
 0000042B  58				pop eax
 0000042C  5F				pop edi
 0000042D  B9 000000C9			mov ecx,sizeof idArr
 00000432  2B C8			sub ecx,eax
 00000434  83 E9 05			sub ecx,5
 00000437  8B F7			mov esi,edi
 00000439  83 C6 04			add esi,4
 0000043C  F3/ A4			rep movsb
					;// moving name back
 0000043E  A1 00002DA9 R		mov eax,id_index_temp
 00000443  BB 00000014			mov ebx,20
 00000448  F7 E3			mul ebx
 0000044A  BF 000028DE R		mov edi,offset nameArr
 0000044F  03 F8			add edi,eax
 00000451  57				push edi
 00000452  50				push eax
 00000453  B9 00000014			mov ecx, name_element_size
 00000458  B0 2B			mov al,'+'
 0000045A  F2/ AE			repne scasb
 0000045C  83 2D 00002D9D R		sub fileSize,name_element_size
	   14
 00000463  01 0D 00002D9D R		add fileSize,ecx
 00000469  58				pop eax
 0000046A  5F				pop edi
 0000046B  B9 000003E9			mov ecx,sizeof nameArr
 00000470  2B C8			sub ecx,eax
 00000472  83 E9 15			sub ecx,21
 00000475  8B F7			mov esi,edi
 00000477  83 C6 14			add esi,20
 0000047A  F3/ A4			rep movsb
					;// moving grades back
 0000047C  A1 00002DA9 R		mov eax,id_index_temp
 00000481  BB 00000003			mov ebx,3
 00000486  F7 E3			mul ebx
 00000488  BF 00002CC7 R		mov edi,offset gradeArr
 0000048D  03 F8			add edi,eax
 0000048F  57				push edi
 00000490  50				push eax
 00000491  B9 00000003			mov ecx, grade_element_size
 00000496  B0 2B			mov al,'+'
 00000498  F3/ AE			repe scasb
 0000049A  74 0C			je G_empety
 0000049C  29 0D 00002D9D R		sub fileSize,ecx
 000004A2  FF 0D 00002D9D R		dec fileSize
 000004A8				G_empety:
 000004A8  FF 0D 00002D9D R		dec fileSize
 000004AE  58				pop eax
 000004AF  5F				pop edi
 000004B0  B9 00000097			mov ecx,sizeof gradeArr
 000004B5  2B C8			sub ecx,eax
 000004B7  83 E9 04			sub ecx,4
 000004BA  8B F7			mov esi,edi
 000004BC  83 C6 03			add esi,3
 000004BF  F3/ A4			rep movsb
					;// moving alphaGrade
 000004C1  BF 00002D5E R		mov edi,offset AlphagradeArr
 000004C6  03 3D 00002DA9 R		add edi,id_index_temp
 000004CC  80 3F 2B			cmp byte ptr[edi],'+'
 000004CF  74 06			je A_empety
 000004D1  FF 0D 00002D9D R		dec fileSize
 000004D7				A_empety:
 000004D7  FF 0D 00002D9D R		dec fileSize
 000004DD  B9 00000033			mov ecx,sizeof alphagradeArr
 000004E2  2B 0D 00002DA9 R		sub ecx,id_index_temp
 000004E8  83 E9 02			sub ecx,2
 000004EB  8B F7			mov esi,edi
 000004ED  83 C6 01			add esi,1
 000004F0  F3/ A4			rep movsb
 000004F2  83 2D 00002D9D R		sub fileSize,2
	   02
 000004F9  FF 0D 00002DA5 R		dec student_count
					ret 
 000004FF  C9		   *	    leave  
 00000500  C2 0008	   *	    ret    00008h
 00000503			DeleteStudent endp 

 00000503			UpdateGrade proc, s_id:ptr byte, s_grade:ptr byte, s_id_size:dword, s_grade_size:dword
 00000503  55		   *	    push   ebp
 00000504  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 00000506  FF 75 10	   *	    push   dword  ptr ss:[ebp]+000000010h
 00000509  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000050C  E8 FFFFFE1C	   *	    call   getIdIndex
 00000511  A3 00002DA9 R		mov id_index_temp,eax
 00000516  BB 00000003			mov ebx,grade_element_size
 0000051B  F7 E3			mul ebx
 0000051D  BF 00002CC7 R		mov edi,offset gradeArr
 00000522  03 F8			add edi,eax
 00000524  89 3D 00002D95 R		mov grade_index,edi
 0000052A  57				push edi
 0000052B  BE 00002D99 R			mov esi , offset empty_grade
 00000530  B9 00000003				mov ecx , grade_element_size
 00000535  F3/ A6				repe cmpsb
 00000537  75 0F				jne full ;//there is a value in it 
 00000539  8B 5D 14					mov ebx,s_grade_size 
 0000053C  01 1D 00002D9D R				add fileSize ,ebx  ;//increment with grade size
 00000542  FF 05 00002D9D R				inc fileSize       ;//increment with alpha grade size
 00000548					full :
 00000548  5F				pop edi
 00000549  83 C7 02			add edi,grade_element_size-1
 0000054C  8B 75 0C			mov esi,s_grade
 0000054F  03 75 14			add esi,s_grade_size
 00000552  4E				dec esi
 00000553  8B 4D 14			mov ecx,s_grade_size 
 00000556  FD				std 
 00000557  F3/ A4			rep movsb
 00000559  BF 00002D5E R		mov edi,offset alphaGradeArr
 0000055E  03 3D 00002DA9 R		add edi,id_index_temp
					INVOKE AlphaGrade,grade_index
 00000564  FF 35 00002D95 R *	    push   grade_index
 0000056A  E8 FFFFFE1E	   *	    call   AlphaGrade
 0000056F  88 07			mov [edi],al
					ret
 00000571  C9		   *	    leave  
 00000572  C2 0010	   *	    ret    00010h
 00000575			UpdateGrade endp  

 00000575			DisStudentData proc,s_id:ptr byte,s_id_size:dword,s_name:ptr byte,s_grade:ptr byte,s_A_grade:ptr byte
 00000575  55		   *	    push   ebp
 00000576  8B EC	   *	    mov    ebp, esp
					invoke getIdIndex,s_id, s_id_size
 00000578  FF 75 0C	   *	    push   dword  ptr ss:[ebp]+00000000Ch
 0000057B  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 0000057E  E8 FFFFFDAA	   *	    call   getIdIndex
 00000583  A3 00002DA9 R		mov id_index_temp,eax
 00000588  BA 00000000			mov edx,0
 0000058D  BE 000028DE R		mov esi ,offset nameArr
 00000592  BB 00000014			mov ebx , name_element_size
 00000597  F7 E3			mul ebx
 00000599  03 F0			add esi,eax
 0000059B  8B 7D 10			mov edi,s_name
 0000059E  B9 00000014			mov ecx, name_element_size
 000005A3				n:
 000005A3  8A 06				mov al ,[esi]
 000005A5  3C 2B				cmp al,'+'
 000005A7  74 06				je name_finished
 000005A9  88 07				mov [edi],al
 000005AB  47					inc edi
 000005AC  46					inc esi
 000005AD  E2 F4			loop n
 000005AF				name_finished:

 000005AF  A1 00002DA9 R		mov eax , id_index_temp
 000005B4  BE 00002CC7 R		mov esi , offset gradeArr
 000005B9  BB 00000003			mov ebx , grade_element_size
 000005BE  F7 E3			mul ebx
 000005C0  03 F0			add esi,eax
 000005C2  8B 7D 14			mov edi,s_grade
 000005C5  B9 00000003			mov ecx, grade_element_size
 000005CA				g:
 000005CA  8A 06				mov al ,[esi]
 000005CC  3C 2B				cmp al,'+'
 000005CE  74 03				je next  ;//next byte 
 000005D0  88 07				mov [edi],al
 000005D2  47					inc edi
 000005D3					next :
 000005D3  C6 07 20				mov byte ptr[edi],' '
 000005D6  46					inc esi
 000005D7  E2 F1			loop g

 000005D9  BE 00002D5E R		mov esi , offset AlphagradeArr
 000005DE  03 35 00002DA9 R		add esi , id_index_temp
 000005E4  8B 7D 18			mov edi , s_A_grade
 000005E7  8A 06			mov al ,[esi]
 000005E9  3C 2B			cmp al,'+'
 000005EB  74 03			je done
 000005ED  88 07				mov [edi],al
 000005EF  47					inc edi
 000005F0				done:
 000005F0  C6 07 20				mov byte ptr[edi],' '
					ret
 000005F3  C9		   *	    leave  
 000005F4  C2 0014	   *	    ret    00014h
 000005F7			DisStudentData endp

 000005F7			Swap proc ,sizes:dword,ptr1:ptr byte 
 000005F7  55		   *	    push   ebp
 000005F8  8B EC	   *	    mov    ebp, esp
 000005FA  8B 75 0C		mov esi,ptr1
 000005FD  BF 00002DAD R	mov edi,offset temp1
 00000602  8B 4D 08		mov ecx,sizes
 00000605  F3/ A4		rep movsb 
 00000607  8B 75 0C		mov esi,ptr1
 0000060A  03 75 08		add esi,sizes
 0000060D  8B 7D 0C		mov edi,ptr1
 00000610  8B 4D 08		mov ecx,sizes
 00000613  F3/ A4		rep movsb 
 00000615  8B 7D 0C		mov edi,ptr1
 00000618  03 7D 08		add edi,sizes
 0000061B  BE 00002DAD R	mov esi,offset temp1
 00000620  8B 4D 08		mov ecx,sizes
 00000623  F3/ A4		rep movsb
				ret
 00000625  C9		   *	    leave  
 00000626  C2 0008	   *	    ret    00008h
 00000629			Swap endp

 00000629			BubbleSort PROC USES eax ecx esi ebx edx edi,
				Count:DWORD ;//array size
 00000629  55		   *	    push   ebp
 0000062A  8B EC	   *	    mov    ebp, esp
 0000062C  50		   *	    push   eax
 0000062D  51		   *	    push   ecx
 0000062E  56		   *	    push   esi
 0000062F  53		   *	    push   ebx
 00000630  52		   *	    push   edx
 00000631  57		   *	    push   edi
 00000632  8B 4D 08		mov ecx,Count
 00000635  49			dec ecx;//decrement count by 1
 00000636  51			L1: push ecx ;//save outer loop count
 00000637  BE 00002815 R	mov esi,offset idArr ;//point to first value
 0000063C  BF 000028DE R	mov edi,offset nameArr
 00000641  BB 00002CC7 R	mov ebx,offset gradeArr
 00000646  BA 00002D5E R	mov edx,offset alphaGradeArr
 0000064B  8B 06		L2: mov eax,[esi] ;//get array value
 0000064D  39 46 04		cmp [esi+4],eax ;//compare a pair of values
 00000650  7F 2D		jg L3 ;//if [ESI] <= [ESI+4], no exchange
 00000652  87 46 04		xchg eax,[esi+4] ;//exchange the pair
 00000655  89 06		mov [esi],eax
 00000657  60			pushad
				invoke swap,4,esi
 00000658  56		   *	    push   esi
 00000659  6A 04	   *	    push   +000000004h
 0000065B  E8 FFFFFF97	   *	    call   Swap
 00000660  61			popad
 00000661  60			pushad
				invoke swap,20,edi
 00000662  57		   *	    push   edi
 00000663  6A 14	   *	    push   +000000014h
 00000665  E8 FFFFFF8D	   *	    call   Swap
 0000066A  61			popad
 0000066B  60			pushad
				invoke swap,3,ebx
 0000066C  53		   *	    push   ebx
 0000066D  6A 03	   *	    push   +000000003h
 0000066F  E8 FFFFFF83	   *	    call   Swap
 00000674  61			popad
 00000675  60			pushad
				invoke swap,1,edx
 00000676  52		   *	    push   edx
 00000677  6A 01	   *	    push   +000000001h
 00000679  E8 FFFFFF79	   *	    call   Swap
 0000067E  61			popad

 0000067F  83 C6 04		L3: add esi,4 ;//move both pointers forward
 00000682  83 C7 14		add edi,20 ;//move both pointers forward
 00000685  83 C3 03		add ebx,3 ;//move both pointers forward
 00000688  83 C2 01		add edx,1 ;//move both pointers forward

 0000068B  E2 BE		loop L2 ;//inner loop
 0000068D  59			pop ecx ;//retrieve outer loop count
 0000068E  E2 A6		loop L1 ;//else repeat outer loop
 00000690			L4: ret
 00000690  5F		   *	    pop    edi
 00000691  5A		   *	    pop    edx
 00000692  5B		   *	    pop    ebx
 00000693  5E		   *	    pop    esi
 00000694  59		   *	    pop    ecx
 00000695  58		   *	    pop    eax
 00000696  C9		   *	    leave  
 00000697  C2 0004	   *	    ret    00004h
 0000069A			BubbleSort ENDP

 0000069A			GenerateReport proc,f_name:ptr byte,sortby:byte
					
 0000069A  55		   *	    push   ebp
 0000069B  8B EC	   *	    mov    ebp, esp
					ret
 0000069D  C9		   *	    leave  
 0000069E  C2 0008	   *	    ret    00008h
 000006A1			GenerateReport endp
source.asm(612) : warning A6004:procedure argument or local not referenced : f_name
source.asm(612) : warning A6004:procedure argument or local not referenced : sortby


 000006A1			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 000006A1  55		   *	    push   ebp
 000006A2  8B EC	   *	    mov    ebp, esp
 000006A4  B8 00000001			mov eax, 1;//Return true to caller. 
	ret 
 000006A9  C9		   *	    leave  
 000006AA  C2 000C	   *	    ret    0000Ch
 000006AD			DllMain ENDP
source.asm(618) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(618) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(618) : warning A6004:procedure argument or local not referenced : lpReserved


				END DllMain

Microsoft (R) Macro Assembler Version 11.00.61030.0	    12/25/17 04:40:56
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002DF9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000006AD Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AlphaGrade . . . . . . . . . . .	P Near	 0000038D _TEXT	Length= 00000064 Public STDCALL
  grade  . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 000003D8 _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 000003DC _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 000003E0 _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 000003E4 _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 000003E8 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000003EA _TEXT	
BubbleSort . . . . . . . . . . .	P Near	 00000629 _TEXT	Length= 00000071 Public STDCALL
  Count  . . . . . . . . . . . .	DWord	 bp + 00000008
  L1 . . . . . . . . . . . . . .	L Near	 00000636 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000064B _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000067F _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 00000690 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeleteStudent  . . . . . . . . .	P Near	 000003F1 _TEXT	Length= 00000112 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  G_empety . . . . . . . . . . .	L Near	 000004A8 _TEXT	
  A_empety . . . . . . . . . . .	L Near	 000004D7 _TEXT	
DisStudentData . . . . . . . . .	P Near	 00000575 _TEXT	Length= 00000082 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  s_name . . . . . . . . . . . .	DWord	 bp + 00000010
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000014
  s_A_grade  . . . . . . . . . .	DWord	 bp + 00000018
  n  . . . . . . . . . . . . . .	L Near	 000005A3 _TEXT	
  name_finished  . . . . . . . .	L Near	 000005AF _TEXT	
  g  . . . . . . . . . . . . . .	L Near	 000005CA _TEXT	
  next . . . . . . . . . . . . .	L Near	 000005D3 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000005F0 _TEXT	
DllMain  . . . . . . . . . . . .	P Near	 000006A1 _TEXT	Length= 0000000C Public STDCALL
  hInstance  . . . . . . . . . .	DWord	 bp + 00000008
  fdwReason  . . . . . . . . . .	DWord	 bp + 0000000C
  lpReserved . . . . . . . . . .	DWord	 bp + 00000010
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnrollStudent  . . . . . . . . .	P Near	 000002C8 _TEXT	Length= 00000065 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  id_size  . . . . . . . . . . .	DWord	 bp + 00000010
  name_size  . . . . . . . . . .	DWord	 bp + 00000014
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateReport . . . . . . . . .	P Near	 0000069A _TEXT	Length= 00000007 Public STDCALL
  f_name . . . . . . . . . . . .	DWord	 bp + 00000008
  sortby . . . . . . . . . . . .	Byte	 bp + 0000000C
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenDatabase . . . . . . . . . .	P Near	 00000166 _TEXT	Length= 0000004B Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	Byte	 bp + 0000000C
  done . . . . . . . . . . . . .	L Near	 000001A2 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Open_Createfile  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveDatabase . . . . . . . . . .	P Near	 00000281 _TEXT	Length= 00000047 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  key  . . . . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SplitBuffer  . . . . . . . . . .	P Near	 0000004F _TEXT	Length= 00000117 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 0000008B _TEXT	
  inner  . . . . . . . . . . . .	L Near	 00000090 _TEXT	
  i  . . . . . . . . . . . . . .	L Near	 000000D5 _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 000000EF _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 00000104 _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 0000011E _TEXT	
  next . . . . . . . . . . . . .	L Near	 00000131 _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000013C _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Swap . . . . . . . . . . . . . .	P Near	 000005F7 _TEXT	Length= 00000032 Public STDCALL
  sizes  . . . . . . . . . . . .	DWord	 bp + 00000008
  ptr1 . . . . . . . . . . . . .	DWord	 bp + 0000000C
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGrade  . . . . . . . . . .	P Near	 00000503 _TEXT	Length= 00000072 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_grade  . . . . . . . . . . .	DWord	 bp + 0000000C
  s_id_size  . . . . . . . . . .	DWord	 bp + 00000010
  s_grade_size . . . . . . . . .	DWord	 bp + 00000014
  full . . . . . . . . . . . . .	L Near	 00000548 _TEXT	
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
encrypt_or_decrypt_buffer  . . .	P Near	 00000021 _TEXT	Length= 00000015 Public STDCALL
  key  . . . . . . . . . . . . .	Byte	 bp + 00000008
  L  . . . . . . . . . . . . . .	L Near	 0000002B _TEXT	
fillBuffer . . . . . . . . . . .	P Near	 000001B1 _TEXT	Length= 000000D0 Public STDCALL
  OUTER  . . . . . . . . . . . .	L Near	 000001F2 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 000001FE _TEXT	
  N1 . . . . . . . . . . . . . .	L Near	 00000208 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000221 _TEXT	
  N2 . . . . . . . . . . . . . .	L Near	 00000229 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 0000023F _TEXT	
  N3 . . . . . . . . . . . . . .	L Near	 00000249 _TEXT	
  N4 . . . . . . . . . . . . . .	L Near	 00000263 _TEXT	
getIdIndex . . . . . . . . . . .	P Near	 0000032D _TEXT	Length= 00000060 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_id_size  . . . . . . . . . .	DWord	 bp + 0000000C
  check  . . . . . . . . . . . .	L Near	 00000362 _TEXT	
  fail . . . . . . . . . . . . .	L Near	 00000380 _TEXT	
  found  . . . . . . . . . . . .	L Near	 00000385 _TEXT	
initialize . . . . . . . . . . .	P Near	 00000036 _TEXT	Length= 00000019 Public STDCALL
  dist . . . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	Byte	 bp + 0000000C
  dist_size  . . . . . . . . . .	DWord	 bp + 00000010
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFSIZE  . . . . . . . . . . . .	Number	 00001400h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
alphaGradeArr  . . . . . . . . .	Byte	 00002D5E _DATA	
alphaGradePtr  . . . . . . . . .	DWord	 00002DE5 _DATA	
alphaGradeS  . . . . . . . . . .	DWord	 00002DD5 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000013 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
empty_grade  . . . . . . . . . .	Byte	 00002D99 _DATA	
endF . . . . . . . . . . . . . .	DWord	 00002DC5 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00002D9D _DATA	
filehandle . . . . . . . . . . .	DWord	 0000000F _DATA	
filesize_temp  . . . . . . . . .	DWord	 00002DA1 _DATA	
gradeArr . . . . . . . . . . . .	Byte	 00002CC7 _DATA	
gradeB . . . . . . . . . . . . .	Byte	 00002DF5 _DATA	
gradeC . . . . . . . . . . . . .	Byte	 00002DF1 _DATA	
gradeD . . . . . . . . . . . . .	Byte	 00002DED _DATA	
gradeF . . . . . . . . . . . . .	Byte	 00002DE9 _DATA	
gradePtr . . . . . . . . . . . .	DWord	 00002DE1 _DATA	
gradeS . . . . . . . . . . . . .	DWord	 00002DD1 _DATA	
grade_element_size . . . . . . .	Number	 00000003h   
grade_index  . . . . . . . . . .	DWord	 00002D95 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idArr  . . . . . . . . . . . . .	Byte	 00002815 _DATA	
idPtr  . . . . . . . . . . . . .	DWord	 00002DD9 _DATA	
idS  . . . . . . . . . . . . . .	DWord	 00002DC9 _DATA	
id_element_size  . . . . . . . .	Number	 00000004h   
id_index_temp  . . . . . . . . .	DWord	 00002DA9 _DATA	
id_temp  . . . . . . . . . . . .	Byte	 00002D91 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
max_student_count  . . . . . . .	Number	 00000032h   
namS . . . . . . . . . . . . . .	DWord	 00002DCD _DATA	
nameArr  . . . . . . . . . . . .	Byte	 000028DE _DATA	
namePtr  . . . . . . . . . . . .	DWord	 00002DDD _DATA	
name_element_size  . . . . . . .	Number	 00000014h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
report_buffer  . . . . . . . . .	Byte	 00001414 _DATA	
report_filehandle  . . . . . . .	DWord	 0000000B _DATA	
report_file  . . . . . . . . . .	Byte	 00000000 _DATA	
startF . . . . . . . . . . . . .	DWord	 00002DC1 _DATA	
student_count  . . . . . . . . .	DWord	 00002DA5 _DATA	
temp1  . . . . . . . . . . . . .	Byte	 00002DAD _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   7 Warnings
	   0 Errors
