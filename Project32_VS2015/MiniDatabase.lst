Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/19/17 08:01:07
source.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 00000000			.data
 = 00001400				BUFSIZE = 5120;//5kb
 = 0000001E				record_size=30
 = 00000003				grade_size=3
 00000000 00000000			filehandle dword ?
 00000004  00001400 [			buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00001405  00001400 [			new_buffer BYTE BUFSIZE DUP(?),0
	    00
	   ] 00
 00002806 00000000			fileSize dword 0
 0000280A  00000028 [			idArr byte 40 dup('_'), 0
	    5F
	   ] 00
 00002833  000000C8 [			nameArr byte 200 dup('_'), 0
	    5F
	   ] 00
 000028FC  0000001E [			gradeArr byte 30 dup('_'), 0
	    5F
	   ] 00
 0000291B  0000000A [			alphaGradeArr byte 10 dup('_'), 0
	    5F
	   ] 00
 00002926 00000000			temp2 dword 0
 00000000			.code
 00000000			Open_Createfile proc,f_Name:ptr byte
 00000000  55		   *	    push   ebp
 00000001  8B EC	   *	    mov    ebp, esp
					INVOKE CreateFile,
					f_Name, GENERIC_WRITE OR GENERIC_READ, DO_NOT_SHARE, NULL,
					OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0
 00000003  6A 00	   *	    push   +000000000h
 00000005  68 00000080	   *	    push   +000000080h
 0000000A  6A 04	   *	    push   +000000004h
 0000000C  6A 00	   *	    push   +000000000h
 0000000E  6A 00	   *	    push   +000000000h
 00000010  68 C0000000	   *	    push   +0C0000000h
 00000015  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000018  E8 00000000 E   *	    call   CreateFileA
					ret
 0000001D  C9		   *	    leave  
 0000001E  C2 0004	   *	    ret    00004h
 00000021			Open_Createfile endp
				
 00000021			getIdIndex proc, IDS: ptr byte
 00000021  55		   *	    push   ebp
 00000022  8B EC	   *	    mov    ebp, esp
 00000024  FC				cld
 00000025  BF 0000280A R		mov edi, offset idArr
 0000002A  B9 00000029			mov ecx, lengthof idArr
 0000002F  B8 00000000			mov eax,0
 00000034  8B 45 08			mov eax, IDS
 00000037  F2/ AE			repne scasb ;scan string till 'ID' is found
 00000039  75 09			jne not_found ;'w' is not found, jump to not_found label
					;Otherwise, ecx has the index of that character but reversed
					;So, make eax = lengthof(str1) - ecx - 1
 0000003B  B8 00000028			mov eax, lengthof idArr - 1
 00000040  2B C1			sub eax, ecx
 00000042  EB 07			jmp found
 00000044				not_found:
 00000044  B8 FFFFFFFF				mov eax, -1
 00000049  EB 0C				jmp done
 0000004B				found:
 0000004B  BB 00000004			mov ebx,4
 00000050  BA 00000000			mov edx,0
 00000055  F7 F3			div ebx
 00000057				done:
					ret
 00000057  C9		   *	    leave  
 00000058  C2 0004	   *	    ret    00004h
 0000005B			getIdIndex endP
				
 0000005B			OpenDatabase proc,f_Name:ptr byte,kye:byte
					;//open the file
 0000005B  55		   *	    push   ebp
 0000005C  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 0000005E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000061  E8 FFFFFF9A	   *	    call   Open_Createfile
 00000066  A3 00000000 R		mov filehandle, eax
					;//load the file in buffer
					INVOKE ReadFile,
					filehandle,offset buffer,BUFSIZE,offset fileSize,NULL
 0000006B  6A 00	   *	    push   +000000000h
 0000006D  68 00002806 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 00000072  68 00001400	   *	    push   +000001400h
 00000077  68 00000004 R   *	    push   dword  ptr OFFSET FLAT: buffer
 0000007C  FF 35 00000000 R *	    push   filehandle
 00000082  E8 00000000 E   *	    call   ReadFile
					;//decrypt data 
					;mov esi ,offset buffer
					;mov edi ,esi
					;mov ecx, fileSize
					;cmp ecx,0
					;je done
					;L:
						;lodsb
						;xor al,kye
						;stosb
					;loop L
					;done:
					;//close the file
 00000087  E8 000001C7			call SplitBuffer
					INVOKE CloseHandle,filehandle
 0000008C  FF 35 00000000 R *	    push   filehandle
 00000092  E8 00000000 E   *	    call   CloseHandle
					ret
 00000097  C9		   *	    leave  
 00000098  C2 0008	   *	    ret    00008h
 0000009B			OpenDatabase endp
source.asm(70) : warning A6004:procedure argument or local not referenced : kye
				
 0000009B			SaveDatabase proc,f_Name:ptr byte,kye:byte
					;//open the file
 0000009B  55		   *	    push   ebp
 0000009C  8B EC	   *	    mov    ebp, esp
					INVOKE Open_Createfile,f_Name
 0000009E  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000000A1  E8 FFFFFF5A	   *	    call   Open_Createfile
 000000A6  A3 00000000 R		mov filehandle,eax
					;//encrypt data 
					;mov esi ,offset buffer
					;mov edi ,esi
					;mov ecx, fileSize
					;L:
						;lodsb
						;xor al,kye
						;stosb
					;loop L
					;;//write data in the file
					INVOKE WriteFile,
					filehandle,offset buffer,fileSize,offset fileSize,null
 000000AB  6A 00	   *	    push   +000000000h
 000000AD  68 00002806 R   *	    push   dword  ptr OFFSET FLAT: fileSize
 000000B2  FF 35 00002806 R *	    push   fileSize
 000000B8  68 00000004 R   *	    push   dword  ptr OFFSET FLAT: buffer
 000000BD  FF 35 00000000 R *	    push   filehandle
 000000C3  E8 00000000 E   *	    call   WriteFile
					;//close the file
					INVOKE CloseHandle,filehandle
 000000C8  FF 35 00000000 R *	    push   filehandle
 000000CE  E8 00000000 E   *	    call   CloseHandle
					ret
 000000D3  C9		   *	    leave  
 000000D4  C2 0008	   *	    ret    00008h
 000000D7			SaveDatabase endp
source.asm(91) : warning A6004:procedure argument or local not referenced : kye
				
 000000D7			EnrollStudent proc,s_id:ptr byte,s_name:ptr byte, id_size: dword, name_size: dword
					;//set pointer to the end of the bufferr
 000000D7  55		   *	    push   ebp
 000000D8  8B EC	   *	    mov    ebp, esp
 000000DA  BF 00000004 R		mov edi , offset buffer 
 000000DF  03 3D 00002806 R		add edi , fileSize			
					;//store id
 000000E5  8B 75 08			mov esi , s_id
 000000E8  8B 4D 10			mov ecx ,id_size
 000000EB  F3/ A4			rep movsb
					;//write (,)
 000000ED  C6 07 2C			mov byte ptr [edi], ','
 000000F0  47				inc edi
					;//store name
 000000F1  8B 75 0C			mov esi , s_name
 000000F4  8B 4D 14			mov ecx , name_size
 000000F7  F3/ A4			rep movsb
					;//write (,)
 000000F9  C6 07 2C			mov byte ptr[edi], ','
 000000FC  47				inc edi
					;//save space to grade and Alpha_gread
 000000FD  83 C7 03			add edi,grade_size 
					;//write (,)
 00000100  C6 07 2C			mov byte ptr[edi], ','
 00000103  83 C7 02			add edi,2
					;//write (,)
 00000106  C6 07 2C			mov byte ptr[edi], ','
 00000109  47				inc edi
					;//carrying_return
 0000010A  C6 07 0D			mov byte ptr[edi],13		
 0000010D  47				inc edi
					;//line_feed
 0000010E  C6 07 0A			mov byte ptr[edi],10
 00000111  B8 00000000			mov eax, 0
 00000116  03 45 10			add eax, id_size
 00000119  03 45 14			add eax, name_size
 0000011C  83 C0 03			add eax, grade_size
 0000011F  83 C0 07			add eax, 7
 00000122  01 05 00002806 R		add fileSize, eax
					ret
 00000128  C9		   *	    leave  
 00000129  C2 0010	   *	    ret    00010h
 0000012C			EnrollStudent endp
				
 0000012C			fillBuffer proc
 0000012C  BF 00000004 R		mov edi, offset buffer
 00000131  8B 1D 00002932 R		mov ebx, idS
					;//copy id
 00000137  BE 0000280A R		mov esi, offset idArr
 0000013C				L1 :
 0000013C  A4				movsb
 0000013D  4A				dec edx
 0000013E  80 3E 5F			cmp byte ptr[esi], '_'
 00000141  75 F9			jne L1
					;//write (,)
 00000143  C6 07 2C			mov byte ptr[edi], ','
 00000146  47				inc edi
					;//copy name
 00000147  BE 00002833 R		mov esi, offset nameArr
 0000014C				L2 :
 0000014C  A4				movsb
 0000014D  4A				dec edx
 0000014E  80 3E 5F			cmp byte ptr[esi], '_'
 00000151  75 F9			jne L2
					;//write (,)
 00000153  C6 07 2C			mov byte ptr[edi], ','
 00000156  47				inc edi
					;//copy Grade
 00000157  BE 000028FC R		mov esi, offset gradeArr
 0000015C  B9 00000003			mov ecx, 3
 00000161				L3 :
 00000161  A4				movsb
 00000162  4A				dec edx
 00000163  E2 FC			Loop L3
					;//write (,)
 00000165  C6 07 2C			mov byte ptr[edi], ','
 00000168  47				inc edi
					;//copy alphaGrade
 00000169  BE 0000291B R		mov esi, offset alphaGradeArr
 0000016E  A4				movsb
					;//write (,)
 0000016F  C6 07 2C			mov byte ptr[edi], ','
 00000172  47				inc edi
					;//add new line
 00000173  C6 07 0D			mov byte ptr[edi], 13
 00000176  47				inc edi
 00000177  C6 07 0A			mov byte ptr[edi], 10
 0000017A  47				inc edi
 0000017B  C3				ret
 0000017C			fillBuffer endp
				
 0000017C			UpdateGrade proc,s_id:dword,s_grade:ptr byte,s_grade_size: dword
 0000017C  55		   *	    push   ebp
 0000017D  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id
 0000017F  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 00000182  E8 FFFFFE9A	   *	    call   getIdIndex
 00000187  A3 00002926 R	mov temp2,eax
 0000018C  BB 00000003		mov ebx,3
 00000191  F7 E3		mul ebx
 00000193  BF 000028FC R	mov edi,offset gradeArr
 00000198  03 F8		add edi,eax
 0000019A  8B 4D 10		mov ecx,s_grade_size 
 0000019D  8B 75 0C		mov esi,s_grade
 000001A0  F3/ A4		rep movsb
				
				ret
 000001A2  C9		   *	    leave  
 000001A3  C2 000C	   *	    ret    0000Ch
 000001A6			UpdateGrade endp
				
 000001A6			DeleteStudent proc,s_id:ptr byte
 000001A6  55		   *	    push   ebp
 000001A7  8B EC	   *	    mov    ebp, esp
				invoke getIdIndex,s_id
 000001A9  FF 75 08	   *	    push   dword  ptr ss:[ebp]+000000008h
 000001AC  E8 FFFFFE70	   *	    call   getIdIndex
				
				;// moving ids back
 000001B1  A3 00002926 R	mov temp2,eax
 000001B6  BB 00000004		mov ebx,4
 000001BB  F7 E3		mul ebx
 000001BD  BF 0000280A R	mov edi,offset idArr
 000001C2  03 F8		add edi,eax
 000001C4  B9 00000029		mov ecx,lengthof idArr
 000001C9  2B C8		sub ecx,eax
 000001CB  83 E9 05		sub ecx,5
 000001CE  8B F7		mov esi,edi
 000001D0  83 C6 04		add esi,4
 000001D3  F3/ A4		rep movsb
				;;// moving name back
 000001D5  A1 00002926 R	mov eax,temp2
 000001DA  BB 00000014		mov ebx,20
 000001DF  F7 E3		mul ebx
 000001E1  BF 00002833 R	mov edi,offset nameArr
 000001E6  03 F8		add edi,eax
 000001E8  B9 000000C9		mov ecx,lengthof nameArr
 000001ED  2B C8		sub ecx,eax
 000001EF  83 E9 15		sub ecx,21
 000001F2  8B F7		mov esi,edi
 000001F4  83 C6 14		add esi,20
 000001F7  F3/ A4		rep movsb
				;// moving grades back
 000001F9  A1 00002926 R	mov eax,temp2
 000001FE  BB 00000003		mov ebx,3
 00000203  F7 E3		mul ebx
 00000205  BF 000028FC R	mov edi,offset gradeArr
 0000020A  03 F8		add edi,eax
 0000020C  B9 0000001F		mov ecx,lengthof gradeArr
 00000211  2B C8		sub ecx,eax
 00000213  83 E9 04		sub ecx,4
 00000216  8B F7		mov esi,edi
 00000218  83 C6 03		add esi,3
 0000021B  F3/ A4		rep movsb
				;// moving alphaGrade
 0000021D  A1 00002926 R	mov eax,temp2
 00000222  BB 00000003		mov ebx,3
 00000227  F7 E3		mul ebx
 00000229  BF 0000291B R	mov edi,offset AlphagradeArr
 0000022E  03 F8		add edi,eax
 00000230  B9 0000000B		mov ecx,lengthof alphagradeArr
 00000235  2B C8		sub ecx,eax
 00000237  83 E9 02		sub ecx,2
 0000023A  8B F7		mov esi,edi
 0000023C  83 C6 01		add esi,1
 0000023F  F3/ A4		rep movsb
				
				ret
 00000241  C9		   *	    leave  
 00000242  C2 0004	   *	    ret    00004h
 00000245			DeleteStudent endp
				
 00000245			DisStudentData proc,s_id:dword,s_name:ptr byte,s_grade:ptr dword
					
 00000245  55		   *	    push   ebp
 00000246  8B EC	   *	    mov    ebp, esp
					ret
 00000248  C9		   *	    leave  
 00000249  C2 000C	   *	    ret    0000Ch
 0000024C			DisStudentData endp
source.asm(252) : warning A6004:procedure argument or local not referenced : s_id
source.asm(252) : warning A6004:procedure argument or local not referenced : s_name
source.asm(252) : warning A6004:procedure argument or local not referenced : s_grade
				
 0000024C			GenerateReport proc,f_name:ptr byte,sortby:byte
				
 0000024C  55		   *	    push   ebp
 0000024D  8B EC	   *	    mov    ebp, esp
					ret
 0000024F  C9		   *	    leave  
 00000250  C2 0008	   *	    ret    00008h
 00000253			GenerateReport endp
source.asm(257) : warning A6004:procedure argument or local not referenced : f_name
source.asm(257) : warning A6004:procedure argument or local not referenced : sortby
				
 00000253			SplitBuffer proc
					;//file example : "10,Ahmed,100,", 13, 10, "20,Zaki,300,", 13, 10, "30,Hassan,600,", 13, 10, 0
 0000292A				.data
 0000292A 00000000			startF dword ? ;// start of field which is needed to be copied
 0000292E 00000000			endF dword ? ;// end of field which is needed to be copied
 00002932 00000000			idS dword ? ;// offset of last id written in (id) array
 00002936 00000000			namS dword ? ;// offset of last name written in (nam) array
 0000293A 00000000			gradeS dword ? ;// offset of last grade written in (grade) array
 0000293E 00000000			alphaGradeS dword ? ;// offset of last alpha grade written in (alphaGrade) array
 00000253				.code
 00000253  60				pushad
 00000254  BF 00000004 R		mov edi, offset buffer
 00000259  C7 05 00002932 R		mov idS, offset idArr
	   0000280A R
 00000263  C7 05 00002936 R		mov namS, offset nameArr
	   00002833 R
 0000026D  C7 05 0000293A R		mov gradeS, offset gradeArr
	   000028FC R
 00000277  C7 05 0000293E R		mov alphaGradeS, offset alphaGradeArr
	   0000291B R
 00000281  B0 2C			mov al, ','
 00000283				outer :;//loop until the file end with 0
 00000283  B9 00000004			mov ecx, 4;//3 for id and name and grade
 00000288				inner:
 00000288  51				push ecx
 00000289  B9 00001401			mov ecx, lengthof buffer
 0000028E  89 3D 0000292A R		mov startF, edi
 00000294  F2/ AE			repne scasb;// move edi to the offset that have (,)
 00000296  89 3D 0000292E R		mov endF, edi
 0000029C  FF 0D 0000292E R		dec endF
 000002A2  59				pop ecx
 000002A3  8B 1D 0000292E R		mov ebx, endF;// ebx equals the number of bytes read (endF - startF)
 000002A9  2B 1D 0000292A R		sub ebx, startF
 000002AF  57				push edi
					;// fill arrays with data between startF and endF
 000002B0  83 F9 03			cmp dword ptr ecx, 3
 000002B3  74 19			je N
 000002B5  83 F9 02			cmp dword ptr ecx, 2
 000002B8  74 23			je G
 000002BA  83 F9 01			cmp dword ptr ecx, 1
 000002BD  74 2D			je A
 000002BF  8B 3D 00002932 R		mov edi, idS
 000002C5  83 05 00002932 R		add idS, 4
	   04
 000002CC  EB 2B			jmp next
 000002CE				N :
 000002CE  8B 3D 00002936 R		mov edi, namS
 000002D4  83 05 00002936 R		add namS, 20
	   14
 000002DB  EB 1C			jmp next
 000002DD				G :
 000002DD  8B 3D 0000293A R		mov edi, gradeS
 000002E3  83 05 0000293A R		add gradeS, 3
	   03
 000002EA  EB 0D			jmp next
 000002EC				A :
 000002EC  8B 3D 0000293E R		mov edi, alphaGradeS
 000002F2  83 05 0000293E R		add alphaGradeS, 1
	   01
 000002F9				next :
 000002F9  51				push ecx
 000002FA  8B CB			mov ecx, ebx
 000002FC  8B 35 0000292A R		mov esi, startF
 00000302  F3/ A4			rep movsb
 00000304  59				pop ecx
 00000305  5F				pop edi
 00000306  E2 80			Loop inner
 00000308  83 C7 02			add edi, 2
 0000030B  80 3F 00			cmp byte ptr[edi], 0
 0000030E  0F 85 FFFFFF6F		jne outer
 00000314  61				popad
 00000315  C3				ret
 00000316			SplitBuffer endp
				
 00000316			AlphaGrade proc grade2: ptr byte
 00000316  55		   *	    push   ebp
 00000317  8B EC	   *	    mov    ebp, esp
 00002942				.data
 00002942 20 36 30 00			gradeF byte " 60", 0
 00002946 20 37 30 00			gradeD byte " 70", 0
 0000294A 20 38 30 00			gradeC byte " 80", 0
 0000294E 20 39 30 00			gradeB byte " 90", 0
 00000319				.code
 00000319  8B 75 08			mov esi,  grade2
 0000031C  BF 00002942 R		mov edi, offset gradeF
 00000321  B9 00000003			mov ecx, 3
 00000326  F3/ A6			repe cmpsb
 00000328  72 43			jb FG
				
 0000032A  8B 75 08			mov esi,  grade2
 0000032D  BF 00002946 R		mov edi, offset gradeD
 00000332  B9 00000003			mov ecx, 3
 00000337  F3/ A6			repe cmpsb
 00000339  72 2E			jb DG
				
 0000033B  8B 75 08			mov esi,  grade2
 0000033E  BF 0000294A R		mov edi, offset gradeC
 00000343  B9 00000003			mov ecx, 3
 00000348  F3/ A6			repe cmpsb
 0000034A  72 19			jb CG
				
 0000034C  8B 75 08			mov esi,  grade2
 0000034F  BF 0000294E R		mov edi, offset gradeB
 00000354  B9 00000003			mov ecx, 3
 00000359  F3/ A6			repe cmpsb
 0000035B  72 04			jb BG
				
 0000035D				AG :
 0000035D  B0 41			mov al, 'A'
 0000035F  EB 0E			jmp done
 00000361				BG :
 00000361  B0 42			mov al, 'B'
 00000363  EB 0A			jmp done
 00000365				CG :
 00000365  B0 43			mov al, 'C'
 00000367  EB 06			jmp done
 00000369				DG :
 00000369  B0 44			mov al, 'D'
 0000036B  EB 02			jmp done
 0000036D				FG :
 0000036D  B0 46			mov al, 'F'
 0000036F				done :
					ret
 0000036F  C9		   *	    leave  
 00000370  C2 0004	   *	    ret    00004h
 00000373			AlphaGrade endp
				
 00000373			DllMain PROC hInstance:DWORD, fdwReason:DWORD, lpReserved:DWORD 
 00000373  55		   *	    push   ebp
 00000374  8B EC	   *	    mov    ebp, esp
 00000376  B8 00000001			mov eax, 1;//Return true to caller. 
					ret 
 0000037B  C9		   *	    leave  
 0000037C  C2 000C	   *	    ret    0000Ch
 0000037F			DllMain ENDP
source.asm(377) : warning A6004:procedure argument or local not referenced : hInstance
source.asm(377) : warning A6004:procedure argument or local not referenced : fdwReason
source.asm(377) : warning A6004:procedure argument or local not referenced : lpReserved
				
				
				END DllMain

Microsoft (R) Macro Assembler Version 14.00.24210.0	    12/19/17 08:01:07
source.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00002952 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000037F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

AlphaGrade . . . . . . . . . . .	P Near	 00000316 _TEXT	Length= 0000005D Public STDCALL
  grade2 . . . . . . . . . . . .	DWord	 bp + 00000008
  AG . . . . . . . . . . . . . .	L Near	 0000035D _TEXT	
  BG . . . . . . . . . . . . . .	L Near	 00000361 _TEXT	
  CG . . . . . . . . . . . . . .	L Near	 00000365 _TEXT	
  DG . . . . . . . . . . . . . .	L Near	 00000369 _TEXT	
  FG . . . . . . . . . . . . . .	L Near	 0000036D _TEXT	
  done . . . . . . . . . . . . .	L Near	 0000036F _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DeleteStudent  . . . . . . . . .	P Near	 000001A6 _TEXT	Length= 0000009F Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
DisStudentData . . . . . . . . .	P Near	 00000245 _TEXT	Length= 00000007 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  s_grade  . . . . . . . . . . .	DWord	 bp + 00000010
DllMain  . . . . . . . . . . . .	P Near	 00000373 _TEXT	Length= 0000000C Public STDCALL
  hInstance  . . . . . . . . . .	DWord	 bp + 00000008
  fdwReason  . . . . . . . . . .	DWord	 bp + 0000000C
  lpReserved . . . . . . . . . .	DWord	 bp + 00000010
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EnrollStudent  . . . . . . . . .	P Near	 000000D7 _TEXT	Length= 00000055 Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_name . . . . . . . . . . . .	DWord	 bp + 0000000C
  id_size  . . . . . . . . . . .	DWord	 bp + 00000010
  name_size  . . . . . . . . . .	DWord	 bp + 00000014
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateReport . . . . . . . . .	P Near	 0000024C _TEXT	Length= 00000007 Public STDCALL
  f_name . . . . . . . . . . . .	DWord	 bp + 00000008
  sortby . . . . . . . . . . . .	Byte	 bp + 0000000C
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenDatabase . . . . . . . . . .	P Near	 0000005B _TEXT	Length= 00000040 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  kye  . . . . . . . . . . . . .	Byte	 bp + 0000000C
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Open_Createfile  . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000021 Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SaveDatabase . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 0000003C Public STDCALL
  f_Name . . . . . . . . . . . .	DWord	 bp + 00000008
  kye  . . . . . . . . . . . . .	Byte	 bp + 0000000C
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SplitBuffer  . . . . . . . . . .	P Near	 00000253 _TEXT	Length= 000000C3 Public STDCALL
  outer  . . . . . . . . . . . .	L Near	 00000283 _TEXT	
  inner  . . . . . . . . . . . .	L Near	 00000288 _TEXT	
  N  . . . . . . . . . . . . . .	L Near	 000002CE _TEXT	
  G  . . . . . . . . . . . . . .	L Near	 000002DD _TEXT	
  A  . . . . . . . . . . . . . .	L Near	 000002EC _TEXT	
  next . . . . . . . . . . . . .	L Near	 000002F9 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
UpdateGrade  . . . . . . . . . .	P Near	 0000017C _TEXT	Length= 0000002A Public STDCALL
  s_id . . . . . . . . . . . . .	DWord	 bp + 00000008
  s_grade  . . . . . . . . . . .	DWord	 bp + 0000000C
  s_grade_size . . . . . . . . .	DWord	 bp + 00000010
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
fillBuffer . . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 00000050 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000013C _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000014C _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000161 _TEXT	
getIdIndex . . . . . . . . . . .	P Near	 00000021 _TEXT	Length= 0000003A Public STDCALL
  IDS  . . . . . . . . . . . . .	DWord	 bp + 00000008
  not_found  . . . . . . . . . .	L Near	 00000044 _TEXT	
  found  . . . . . . . . . . . .	L Near	 0000004B _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000057 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BUFSIZE  . . . . . . . . . . . .	Number	 00001400h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
alphaGradeArr  . . . . . . . . .	Byte	 0000291B _DATA	
alphaGradeS  . . . . . . . . . .	DWord	 0000293E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000004 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
endF . . . . . . . . . . . . . .	DWord	 0000292E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileSize . . . . . . . . . . . .	DWord	 00002806 _DATA	
filehandle . . . . . . . . . . .	DWord	 00000000 _DATA	
gradeArr . . . . . . . . . . . .	Byte	 000028FC _DATA	
gradeB . . . . . . . . . . . . .	Byte	 0000294E _DATA	
gradeC . . . . . . . . . . . . .	Byte	 0000294A _DATA	
gradeD . . . . . . . . . . . . .	Byte	 00002946 _DATA	
gradeF . . . . . . . . . . . . .	Byte	 00002942 _DATA	
gradeS . . . . . . . . . . . . .	DWord	 0000293A _DATA	
grade_size . . . . . . . . . . .	Number	 00000003h   
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
idArr  . . . . . . . . . . . . .	Byte	 0000280A _DATA	
idS  . . . . . . . . . . . . . .	DWord	 00002932 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
namS . . . . . . . . . . . . . .	DWord	 00002936 _DATA	
nameArr  . . . . . . . . . . . .	Byte	 00002833 _DATA	
new_buffer . . . . . . . . . . .	Byte	 00001405 _DATA	
record_size  . . . . . . . . . .	Number	 0000001Eh   
red  . . . . . . . . . . . . . .	Number	 00000004h   
startF . . . . . . . . . . . . .	DWord	 0000292A _DATA	
temp2  . . . . . . . . . . . . .	DWord	 00002926 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   10 Warnings
	   0 Errors
